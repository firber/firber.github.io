<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[《Head First HTML 与CSS（第2版）》读书笔记]]></title>
      <url>%2F2017%2F01%2F04%2F%E3%80%8AHead%20First%20HTML%20%E4%B8%8ECSS%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[《Head First HTML 与CSS（第2版）》是比较基础的入门书，快速过一遍，了解HTML和CSS最基本的概念和知识。 认识HTML标记语言 Web服务器存储并提供由HTML和CSS创建的网页。浏览器获取页面，并根据HTML和CSS显示网页的内容。 HTML 是超文本标记语言 (HyperText Markup Language) 的缩写，用以建立网页的结构。 CSS是层叠样式表 (Cascading Style Sheets) 的缩写，用以控制HTML的表现。 大部分空白符（制表符、回车、空格）都会被浏览器忽略，不过可以利用空白符让HTML更有可读性。 注释的格式为： &lt;!-- 我是注释内容，可以写为多行 --&gt; 元素 通过HTML，我们利用标记来标示内容提供结构。我们把匹配标记以及它们包围的内容称为元素。 元素由3部分组成：开始标记 + 内容 + 结束标记。不过有些元素（比如&lt;img&gt;）有所例外。 开始标记可以有属性，如下文的 type。 结束标记在左尖括号后面、标记名前面有一个“/”，以明确这是结束标记。 所有页面都要有一个&lt;html&gt;元素,其中要有一个&lt;head&gt;元素和一个&lt;body&gt;元素。 网页的信息放在&lt;head&gt;元素里。 &lt;body&gt;元素里的内容就是你将在浏览器里看到的东西。 CSS 可以在&lt;style&gt;元素中写CSS规则，为HTML网页增加CSS。&lt;style&gt;元素总要放在&lt;head&gt;元素里。 &lt;style&gt;元素有一个名为type的（可选的）属性，告诉浏览器你在使用什么类型的样式，由于要使用CSS，所以可以指定“text/css”类型。 可以使用CSS在HTML中指定元素的特性。示例123456789101112131415161718192021222324252627&lt;html&gt; &lt;head&gt; &lt;title&gt;Starbuzz Coffee&lt;/title&gt; &lt;style type="text/css"&gt; body &#123; background-color: #d2b48c; margin-left: 20%; margin-right: 20%; border: 2px dotted black; padding: 10px 10px 10px 10px; font-family: sans-serif; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Starbuzz Coffe Beverages&lt;/h1&gt; &lt;h2&gt;House Blend, $1.49&lt;/h2&gt; &lt;p&gt;A smooth, mold blend of coffees from Mexico, Bolivia and Guatemala.&lt;/p&gt; &lt;h2&gt;Mocha Caffe Latte, $2.35&lt;/h2&gt; &lt;p&gt;A mixture of espresso, steamed milk and milk foam.&lt;/p&gt; &lt;h2&gt;Chai Tea, $1.85&lt;/h2&gt; &lt;p&gt;A spicy drink made with black tea, spices, milk and honey.&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 深入了解超文本超链接 使用&lt;a&gt;元素从一个页面链接到另一个页面 &lt;a&gt;元素的href属性指定链接的目标文件。 &lt;a&gt;元素的内容是链接的标签，即在网页上看到的链接文本，文字和图像都可以用作链接的标签。 单击一个链接时，浏览器会加载href属性中指定的Web页面。文件路径 相对路径是相对于链接的源Web页面指向网站中其他文件的一个链接。 “..”表示“父文件夹”，使用“..”可以连接到源文件上一层文件夹中的一个文件。 记住要用“/”字符分隔路径中的各个部分。 为网站选择的文件名和文件夹名中不要使用空格。 最好在构建网站初期组织网站文件，这样就不用再网站升级时修改一大堆的路径了。 构建模块页面规划 开始输入内容之前要规划好Web页面的结构。首先画出一个草图，然后创建一个略图，最后再写出HTML。 尽可能使用元素来告诉浏览器你的内容的含义，而不是变现形式。 规划页面时，首先设计大的块元素，然后用内联元素完善。 一定要使用与内容含义最接近的元素。如果需要一个列表，就不要使用段落元素。块元素和内联元素 块元素通常用作Web页面中的主要构建模块，内联元素往往用来标记小段内容。 &lt;p&gt;、&lt;blockquote&gt;、&lt;ol&gt;、&lt;ul&gt;和&lt;li&gt;都是块元素，它们单独显示，在内容前后分别有一个换行（默认地）。 &lt;q&gt;和&lt;em&gt;是内联元素。这些元素中的内容与其包含元素的其余内容放在一起。 void元素 void元素没有内容，只有一个标记组成。 为方便使用，可省略void元素的结束标记，只使用一个开始标记。 &lt;br&gt;和&lt;img&gt;是void元素。 列表 要结合两个元素建立一个HTML列表：将每个列表项放在一个&lt;li&gt;元素中，用&lt;ol&gt;和&lt;ul&gt;元素包围以上&lt;li&gt;元素。 &lt;ol&gt; (ordered list)是有序列表,会自动为列表创建序号；&lt;ul&gt; (unordered list)是无序列表。 嵌套元素 嵌套元素是指完全包含在另一个元素中的元素。如果元素能正确地嵌套，所有标记都能正确匹配。 可以在列表中建立嵌套列表，将&lt;ol&gt;和&lt;ul&gt;元素放在&lt;li&gt;元素中。 特殊字符 字符 字符实体 &gt; &amp;gt; &lt; &amp;lt; &amp; &amp;amp; &copy; &amp;copy; &reg; &amp;reg; &yen; &amp;yen; &trade; &amp;trade; 更多的可以参考 HTML特殊字符编码对照表 连接起来HTTP URL是统一资源定位符 (Uniform Resource Locators)，用以标识Web上的任何资源。 典型的URL由一个协议、一个网站名和资源的一个绝对地址组成。 HTTP，超文本传输协议 (HyperText Transfer Protocol) 是一个请求和响应协议，用以在Web服务器和浏览器之间传送Web页面。 访问请求 如果请求内容是一个目录而没有指定文件名，则Web服务器会查找一个默认页面并返回到浏览器。“index.html”和“default.htm”都是默认页面。 正常的Web服务器几乎都在端口80接收请求。如果没有指定端口，则默认为80。 &lt;a&gt;元素的新应用 &lt;a&gt;元素的href属性中可以使用相对路径或URL来链接其他Web页面。一般而言，内部页面使用相对路径，对外部链接才使用URL。 可以使用id属性为页面的某个元素创建一个目标位置。在&lt;a&gt;元素的href属性使用#后面加一个目标id，可以连接到页面中的那个目标位置。 为了便于访问，可以在&lt;a&gt;元素中使用title属性提供链接的一个描述。 使用target属性在另一个浏览器窗口中打开链接。不过，对于使用不同设备和浏览器的用户，可能会有不相同的表现。以下为示例代码：12Read the &lt;a target="_blank" href="http://wickedlysmart.com/buzz/index.html#Coffee" title="Read all about caffeine on the Buzz"&gt;Caffeine Buzz&lt;/a&gt; 增加图像&lt;img&gt;元素的应用&lt;img&gt;的基本使用 使用&lt;img&gt;元素在Web页面中放置图像。 浏览器读取HTML页面之后，要先从Web服务器获取图像再显示，这与其他元素稍有不同。 &lt;img&gt;元素是一个内联元素，浏览器不会在图像前后插入一个换行。 如果Web页面上有多个大图像，可以通过创建图像的缩略图使页面更可用，下载得更快。缩略图可以链接到原来的大图像上，这样当用户单击这些缩略图时可以看到原来的大图像。 &lt;img&gt;的属性 src属性指定图像文件的位置，可以使用相对路径包含本地网站中的图像，也可以使用URL包含其他网站的图像。 alt属性是对图像的一个有意义的描述。在一些浏览器中，如果无法找到图像，就会显示这个描述。 &lt;img&gt;元素的width和height属性可以使用像素数提前指定图像的宽度和高度，从而让浏览器在获取图像前就开始建立图像的页面布局（但并不推荐如此调整图像大小，因为浏览器仍然需要获取整个图像）。 图像的知识图像格式JPEG、PNG和GIF是Web浏览器广泛支持的3种图像格式。 JPEG特点 可以表示包含多达1600万种不同颜色的图像。 可以按不同质量压缩，可以很好地权衡图像质量和文件大小来满足实际需求。 是一种“有损”格式，压缩文件大小时会丢掉图像的一些信息。 不支持透明度 不支持动画。 适用范围适合连续色调图像，如照片和其他复杂图像。 PNG和GIF特点 PNG有种不同的大小选择：PNG-24（支持数百万种颜色）、PNG-16（支持数千种颜色），以及PNG-8（支持256种颜色），可以根据需要来选择。 GIF可以表示最多256种不同颜色的图像。 PNG和GIF会压缩文件来缩小文件大小，不过不会丢失信息，是一种“无损”格式，但文件往往也更大。 PNG允许将颜色设置为“透明”，GIF只允许一种颜色设置为“透明”，PNG能提供比GIF更好的透明度控制。 GIF支持动画。 适用范围适合保存logo和其他包含单色、线条或文本的简单图形。 图像的编辑 太大的图像会使Web页面难以使用，下载和显示都很慢，可使用照片编辑应用如 Photoshop Elementsis 调整图像的大小。 在 Photoshop Elementsis 中，使用 “Save for Web” 对话框中的 Matte（蒙版）颜色菜单来选择合适的颜色（与背景色相同），柔化PNG或GIF图像的边缘。 标准及其他HTML5 每个页面都要从一个文档类型定义 (doctype) 开始，来告诉浏览器你使用的HTML版本。 紧接着doctype，&lt;html&gt;元素必须是Web页面的最顶层元素，页面中的所有其他内容都嵌套在这个元素中。 只有&lt;head&gt;和&lt;body&gt;元素能直接放在&lt;html&gt;元素中，其他元素都必须放在这两个元素中。 &lt;head&gt;元素中的&lt;meta&gt;标记告诉浏览器内容类型和字符编码等关于一个Web页面的额外信息。 大多数Web页面的HTML文件都使用utf-8编码，因此应在&lt;head&gt;中包含一个&lt;meta charset=&quot;utf-8&quot;&gt;标记。 一定要在&lt;head&gt;元素中包含一个&lt;title&gt;属性。 alt属性是&lt;img&gt;元素中的必要属性。W3C验证工具W3C验证工具可以检查页面是否符合HTML5标准。示例123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Head First Lounge&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Welcom to the New and Improved Head First Lounge&lt;/h1&gt; &lt;img src="drinks.gif" alt="Drinks"&gt; &lt;p&gt; Join us any evening for refreshing &lt;a href="elixir.html"&gt;elixirs&lt;/a&gt;, conversation and maybe agame or two of &lt;em&gt;Dance Dance Revolution&lt;/em&gt;. Wireless access is always provided; BYOWS (Bring your own Web server). &lt;/p&gt; &lt;h2&gt;Directions&lt;/h2&gt; &lt;p&gt; You'll find us right in the center of downtown Webville. If you need help finding us, check out our &lt;a href="directions.html"&gt;detailed derections&lt;/a&gt;. Come join us! &lt;/p&gt;&lt;/body&gt;&lt;/html&gt; CSS入门CSS基本语法规则 CSS包含一些简单语句，称为规则，每个规则为选择的一些HTML元素提供样式。 典型的规则包括一个选择器，以及一个或多个属性和值。 注释：如果要注释CSS语句，将其包围在/*和*/之间。1234567891011h1, h2 &#123; font-family: sans-serif; color: gray; /* 这里是CSS注释内容 */&#125;h1 &#123; border-bottom: 1px solid black;&#125;p &#123; color: maroon;&#125; 选择器 选择器指定规则将应用到哪些元素。 通过用逗号分隔元素名，可以一次选择多个元素。 元素类 可以通过给元素添加class属性将其归到某一类中，元素可以添加多个类名，类名之间用空格分隔。如 1&lt;p class="raspberry blueberry greentea"&gt; 通过“元素名.类名”的形式在CSS中选中该类中的一个特定元素指定规则。如 123p.greentea &#123; clolor: green;&#125; 使用 “.classname” 可以选择属于这个类的所有元素。如 123.greentea &#123; color: green;&#125; 属性和值 规则中的所有属性和值都放在{}大括号之间 每个属性声明以一个分号结束。 继承：很多属性能够继承。例如，如果为&lt;body&gt;元素设置了一个可继承的属性，那么&lt;body&gt;的所有子元素都会继承这个属性。 覆盖：通过为你想改变的元素创建一个更特定的规则，能覆盖该元素继承的属性。 常用CSS样式属性 属性 说明 color 设置文本元素的字体颜色 background-color 设置元素的背景颜色 background-image 在元素后面放置一个图像 border 在元素周围加边框，可以是实现、凸起、虚线边框 top 控制元素顶部的位置 left 制定一个元素的左边所在位置 padding 设置一个元素边缘和它的内容之间的空间距离 font-family 设置元素的字体格式 font-weight 控制文本的粗细，可以用来设置粗体 font-size 让文本更大或更小 font-style 设置斜体文体 text-align 将文本左对齐、居中或右对齐 line-height 设置一个文本元素中的行间距 letter-spacing 在字母之间设置间距 list_style 改变列表中列表项的外观 CSS验证工具可以使用W3C的CSS验证工具验证CSS语法。 在HTML中使用CSS 要在HTML中包含一个样式，最容易的办法就是使用&lt;style&gt;标记。 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Head First Lounge&lt;/title&gt; &lt;style type="text/css"&gt; &lt;!-- 样式内容在此 --&gt; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; . . . &lt;/body&gt;&lt;/html&gt; 对于HTML以及相当复杂的网站，可能要链接到一个外部样式表。 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Head First Lounge&lt;/title&gt; &lt;link type="text/css" rel="stylesheet" href="lounge.css"&gt; &lt;/head&gt; &lt;body&gt; . . . &lt;/body&gt;&lt;/html&gt; 增加字体和颜色样式字体样式CSS提供了很多属性对字体的外观加以控制： 属性 说明 font-family 定制页面中使用的字体 font-size 控制字体大小 color 设置文本颜色 font-weight 设置字体的粗细 text-decoration 为文本增加更多风格，如上划线、下划线和删除线等 字体系列 font-family字体系列类型字体系列是一组有共同特征的字体，用于Web的字体系列有5个。 字体系列 说明 sans-serif（无衬线体） 包括没有衬线的字体。与serif字体相比，通常认为sans-serif字体在计算机屏幕上更容易识读 serif（衬线体） 包括有衬线的字体，更多用于新闻报纸的文字排版 Monospace（等距） 字体包含固定宽度的字符 Cursive（手写体） 包括看似手写的字体，有时会看到标题中使用这些字体 Fantasy 包含有某种风格的装饰性字体 衬线：字幕末端的装饰性“小细线”。 在CSS中指定字体系列 访问者在你的Web页面上看到的字体取决于他们自己的计算机上安装了哪些字体，除非你使用Web字体。 最好在font-family CSS属性中指定候选字体，以防用户没有安装你的首选字体，最后一个字体要指定为一个通用字体，如serif或sans-serif，这样如果找不到其他字体浏览器可以替换适当的字体。12345body &#123; font-family: Verdana, Geneva, Arial, sans-serif; /* 大多数PC上都有Verdana字体，另外大多数Mac上都有Geneva，Arial在PC和Mac上 都很常见，如果其他字体都找不到，就使用默认的sans-serif字体。 */&#125; 增加Web字体1.找到一个字体：访问一些提供字体的网站，如Google Web Fonts、Fonts.com 和 Extensis，此处使用Emblema One。 2.确保有所需字体的所有格式，推荐使用Web开放字体格式，另外选择TrueType作为候选，因为这种字体在所有浏览器上也得到了很好的支持（IE除外）。 字体格式 文件扩展名 说明 TrueType字体 .ttf OpenType字体 .otf TrueType的更新版 Embedded OpenType字体 .eot OpenType的一种压缩形式，是Microsoft专用的，仅IE提供支持 SVG字体 .svg Svalable Vector Graphics是一种通用图像格式，SVG字体使用这种格式表示字符 Web开放字体格式 .woff 建立在TrueType基础之上，已经发展为Web字体的一个标准。大多数现代浏览器都对这种格式提供了很好的支持 3.把你的字体文件放在Web上，得到字体文件的URL，例如12http://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.woffhttp://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.ttf 4.在CSS中增加@font-face属性，在CSS文件中的最上面增加一个@font-face规则：1234567/* 规则以 @font-face开头 */@font-face &#123; /* @font-face规则会建立一个字体，并指定一个font-family名，以便以后使用 */ font-family: "Emblema One"; src: url("http://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.woff"), url("http://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.ttf");&#125; 5.在CSS中使用 font-family 名1h1 &#123; font-family: "Emblema One", sans-serif; &#125; 字体大小 font-size字体大小调整方法px像素用像素指定字体大小，就是告诉浏览器字母高度（字母的最低部分与最高部分之间）是多少像素。1234body &#123; /* 先指定一个数，后面是 “px”，之间不能有空格 */ font-size: 14px&#125; 百分数用百分数指定字体大小时，会相对于另一个字体大小指出这个字体有多大（一般而言就是相对于父元素的字体大小）。123456body &#123; font-size: 14px;&#125;h1 &#123; font-size: 150%; /* 此处大小即为21px */&#125; emem 类似于百分数，也是一个相对度量单位，不过是指定一个比例因子。123456789body &#123; font-size: 14px;&#125;h1 &#123; font-size: 150%; &#125;h2 &#123; font-size: 1.2em /* 此处大小因大多数浏览器四舍五入为17px */&#125; 关键字可以把一个字体大小指定为 xx-small, x-small, small, medium, large, x-large 或 xx-large，浏览器会使用自己定义的默认值来把这些关键字转换为像素值。各个关键字对应的大小通常有以下关系（但不同浏览器中关键字的定义并不一定相同）： 每个大小大约比前一个大小大20% small通常定义为大约12像素。 在CSS中指定字体大小 选择一个关键字（推荐 small 或 medium ），指定它作为 body 规则中的字体大小（这相当于页面的默认字体大小）。 使用 em 或百分数，相对于body字体大小指定其他元素地字体大小。 123body &#123; font-size: small; &#125;h1 &#123; font-size: 150%; &#125;h2 &#123;font-size: 120%; &#125; 只要改变 body 字体大小，就可以相应地按比例调整Web页面的所有字体大小，方便用户自定义调整。 如果直接适用像素指定字体大小，老版本的 Internet Explorer 将不支持文本缩放，而且不利于维护。 字体粗细 font-weight 将元素的 font-weight 属性设置为 bold，来使用粗体文本： 1font-weight: bold; 如果一个元素默认地设置为bold，或者从父元素继承了粗体，可以如下去掉粗体样式： 1font-weight: normal; 使用bolder和lighter两个相对 font-weight 属性会相对于所继承的值使文本样式稍粗一些或者稍细一些。但由于没有多少字体支持粗细程度的微小差别，实际上这两个值通常没有任何效果，所以这些值很少使用。 还可以把 font-weight 属性设置为 100 到 900 之间的一个数（100的倍数），不过这个特性也未得到字体和浏览器的广泛支持，所以通常并不使用。 字体风格 font-style 将 font-syle 属性设置为italic或者oblique会使字体看起来是倾斜的。 12font-style: italic; /* 斜体 */font-style: oblique; /* 倾斜字体 */ 由于无法控制用户使用的字体和浏览器，实际上指定斜体或倾斜文本最终表现风格并没有明显的差别，所以不必严格区别，完全就用斜体。 文本装饰 text-decoration文本装饰允许你为文本增加一些装饰性的效果，如下划线、上划线和删除线。123456em &#123; text-decoration: line-through; /* 添加一个从文本中间穿过的横线 */ text-decoration: underline; /* 添加下划线 */ text-decoration: overline; /* 添加上划线 */ text-decoration: none; /* 如果文本继承了不想要的文本装饰，使用“none”值来去除装饰 */&#125; 如果要对 text-decoration 指定多个值，需要将这几个值合并到一个 text-decoration声明中，因为不同规则中的装饰不会累加在一起：123em &#123; text-decoration: underline overline;&#125; 实际上，并不推荐使用 text-decoration 添加下划线，因为会被用户误认为是链接文本。作为替代，可使用 border-bottom属性给整个段落添加下划线。12345h1, h2 &#123; color: #cc6600; border-bottom: thin dotted #888888; /* text-decoration : underline; */&#125; 颜色样式Web颜色如何工作 Web颜色是混合不同数量的红、绿、蓝色得到的 如果混合红色100%，绿色100%，蓝色100%，可以得到白色； 如果混合红色60%，绿色60%，蓝色60%，可以得到灰色； 如果混合红色80%，绿色40%，蓝色0%，可以得到橙色； 如果混合红色0%，绿色0%和蓝色0%，可以得到黑色。 指定Web颜色方法按名指定颜色要在CSS中描述颜色，最直接的方法就是使用颜色名：123body &#123; background-color: silver; /* 不区分大小写 */&#125; 有16种基本颜色和150种扩展颜色可以采用这种方法指定，这些颜色名只是预定义了红、绿、蓝三种颜色分量的多少。16种基本颜色分别是：Aqua、black、Blue、Fuchsia、Gray、Green、Lime、Maroon、Navy、Olive、Purple、Red、Silver、Teal、White、Yellow。所有浏览器中肯定都有这16种颜色，不过可能只在较新的浏览器中能找到150种扩展颜色。 用红绿蓝值指定颜色可以按红、绿、蓝分量的多少来指定一个颜色。以上文的橙色为例，可以如下表示：1234body &#123; background-color: rgb(80%, 40%, 0%); /* 以 “rgb” 开头，这是 red,green,blue 的缩写，后面依次指定其百分比 */&#125; 还可以将红、绿、蓝值指定为0到255之间的一个数值，如下表示：1234body &#123; background-color: rgb(204, 102, 0); /* 数值为255与相应百分数的乘积 */&#125; 使用十六机制码指定颜色将表示颜色分量的红绿蓝值依次转换成十六进制码就是相应的十六进制码颜色表示方法：1234body &#123; background-color: #cc6600 /* 十六进制的cc对应十进制的204,66对应102,0对应0 */&#125; 如果每一组分量中两位数字都相同，可以使用简写，如 #cc6600 可以缩写为 #cb0。 找到Web颜色 图像编辑应用的选色器 使用在线颜色表，例如 Wikipedia的颜色表。 盒模型 box model盒模型的基本概念CSS使用一个盒模型来控制元素如何显示。所有元素都当做盒子：段落、标题、块引用、列表、列表项等，甚至内联元素（如&lt;em&gt;和链接）。盒子由内容区和可选的内边距、边框和外边距组成。 区域 说明 内容区 content area 内容区包含元素的内容（例如文本或图像），它的大小通常正好能包含全部内容。内容区被内边距包围。 内边距 padding 内边距是可选的，通过使用内边距，可以在内容与盒子边框之间创建一些看得到的额外空间。作为元素的一部分，元素的背景颜色（或背景图像）会延伸到内边距下面。内边距是透明的，没有颜色，也没有自己的装饰。 边框 border 元素周围可以添加一个可选的边框，这个边框会包围内边距，提供了从视觉上分离内容的一种手段。边框可以有各种不同的宽度、颜色和样式。 外边距 margin 外边距也是可选的，它允许在元素和其他元素之间增加空间。类似于内边距，外边距也是透明的，本身没有颜色或装饰。 盒模型的一般设置边距行间距 line-height使用 line-height 属性可以设置文本行之间的间距,line-height属性可以继承，行间距的指定方式有以下5种： 值 描述 继承问题 normal 默认。设置合理的行间距，一般为1.2 子元素根据自身字体大小乘以固定倍数（由浏览器给出，一般为1.2）计算行间距，不继承父元素属性，元素随着自身字体大小做相应的缩放 number 设置数字，此数字会与当前的字体尺寸相乘来设置行间距 与normal类似，不过倍数可自定义 length 使用像素数设置固定的行间距 继承指定的固定行间距 % 基于当前字体尺寸的百分比行间距 与设置数字不同，此处继承父元素的行间距绝对值，而非比例 inherit 规定应该从父元素继承行间距的值 内边距和外边距 内边距和外边距大小可以用像素或百分数设置。 对于外边距、内边距或边框，CSS提供了相应的属性，可以一次对所有四个边完成设置，也可以单独设置任意一边（但后设置的会覆盖先设置的值，因此如需对某一边进行单独设置，请将其规则放置在通用规则后面）。 123456.guarantee &#123; padding: 25px; padding-left: 80px; /* 注意设置顺序，先通用，再特例 */ margin: 30px; margin-right: 250px;&#125; 边框边框样式 border-styleborder-style 属性可以控制边框的视觉样式，共有8种不同的边框样式，包括实线(solid)、破折线(dashed)、虚线(dotted)、双线(double)、槽线(groove)、内凹(inset)、外凸(outset)和脊线(ridge)。1border-style: groove; 边框宽度 border-width边框宽度可以用像素设置，也可以使用关键字 thin、medium和thick来指定。12border-width: thin;border-width: 5px; 边框颜色 border-color边框颜色设置与设置字体颜色类似，可以使用颜色名，rgb值或十六进制码来指定颜色。123border-color: red;border-color: rgb(100%, 0%, 0%);border-color: #ff0000; 边框圆角 border-radius使用 border-radius 属性可以对有边框的元素创建圆角。12border-radius: 15px;border-radius: 3em; /* 如果使用em，边框半径的度量相对于元素的字体大小。 */ 特定某一边的边框特性化就像外边距和内边距一样，边框还可以指定任意一边的边框样式、宽度、颜色或圆角。1234border-top-color: black;border-top-style: dashed;border-top-width: thick;border-top-left-radius: 15px; 背景图像 background-imagebackground-image 和 &lt;img&gt;backgound-image 属性用途非常特定，只是设置一个元素的背景图像，属于表现方面的一个装饰，在页面中没有任何具体的意义。而&lt;img&gt;元素用来包含一个图像，它在页面中可能有更为重要的作用，如照片或 logo。1background-image: url(images/background.gif); 注意 URL两边不需要加引号。 background-positionbackground-position 属性会设置图像的位置，可以按像素指定，也可以指定为一个百分数，或者使用关键字指定，如 top、left、right、bottom 和 center。1background-position: top left; /* 将这个图像放在元素的左上角 */ background-repeatbackground-repeat 属性会设置背景图像的平铺行为，默认地背景图像会在水平和垂直方向上重复。12345background-repeat: repeat; /* 默认行为 */background-repeat: no-repeat; /* 图像显示一次，不重复 */background-repeat: repeat-x; /* 图像只在水平方向上重复 */background-repeat: repeat-y; /* 图像只在垂直方向上重复 */background-repeat: inherit; /* 按照父元素的设置来处理 */ 类和 id 对于希望成组指定样式的元素要使用 class 属性。 使用id属性为元素指定一个唯一的名字。还可以使用id属性为元素提供唯一的样式。 一个元素只能有一个id，不过它可以属性多个类。 混合样式表 在HTML中可以使用多个样式表。如果两个样式表包含冲突的属性定义，HTML文件中最后链接的样式表最为优先。 使用多个样式表，一方面可以在继承CSS样式的同时覆盖和修改特定的样式，另一方面也可以针对现实页面的不同设备类型来调整页面的样式，以提供最优的表现形式。 设备指定&lt;link&gt;元素添加媒体查询media 属性允许在应用样式表时指定设备类型，通过创建一个“媒体查询”来指定设备类型，媒体查询要与设备匹配。1234&lt;!-- 下面查询指定了有屏幕且屏幕宽度不超过480像素的设备类型 --&gt;&lt;link rel="stylesheet" href="lounge-mobile.css" media="screen and (max-device-windth: 480px)"&gt;&lt;!-- 指定设备类型为打印机 --&gt;&lt;link rel="stylesheet" href="lounge-print.css" media="print"&gt; 查询中有很多属性可以使用，如屏幕宽度min-device-width、max-device-width、以及显示方向orientation（这可以是横向（landscape）或纵向（protrait）。可以根据需要为HTML增加多个&lt;link&gt;标记，涵盖所要支持的所有设备。 CSS的 @media 规则指定要为CSS指定有特定属性的设备，还可以直接写在CSS中。12345678910@media screen and (min-device-width: 481px) &#123; #guarantee &#123; margin-right: 250px; &#125; &#125;@media print &#123; body &#123; font-family: Times, "times New Roman", serif; &#125;&#125; 需要注意的是，如果使用CSS的 @media 规则，要把所有规则都放在一个文件中，再用 @media 规则将其分开，这样 CSS会变得非常庞大。 div 与 span、&lt;div&gt;元素 逻辑区 (logical section) 就是页面上彼此相关的一组元素，找出逻辑区有助于标识主内容区以及页面的页眉和页脚。 &lt;div&gt;元素用于将相关的元素归组在一起，放在逻辑区中。可以使用&lt;div&gt;元素将需要共同样式的元素归组在一起。 使用嵌套&lt;div&gt;元素为文件增加更多结构，这有利于保证结构清晰或者方便增加样式。不过除非确实需要，否则不要过多地增加结构。 一旦用&lt;div&gt;元素将内容区归组在一起，类似于其他块元素，可以对这些&lt;div&gt;增加样式。例如，对于包含在&lt;div&gt;中的一组元素，可以使用嵌入这些元素的&lt;div&gt;的边框属性，对这组元素增加一个边框。 元素宽度和对齐方式元素宽度 width width 属性设置一个元素内容区的宽度，可以通过像素数指定具体大小，也可以指定一个百分数。如果使用百分数，那么宽度会计算为元素所在容器宽度的一个百分比（容器可以是&lt;body&gt;、&lt;div&gt;等）。 一个块元素的默认宽度是 “auto”，这说明它会延伸占满浏览器的整个宽度。 一个元素的总宽度是内容区宽度，加上所增加的内边距、边框和外边距的宽度。 一般而言，一个元素的高度是默认的，也就是 auto，浏览器会在垂直方向上延伸内容区，使所有内容都可见。一般地，不用指定元素的高度。 元素内容对齐 text-align text-align 是块元素的一个属性，用来将这个块元素中的所有内容对齐(包括内联元素和嵌套块元素)。 这个属性可以由块元素中的所有嵌套的块元素继承。 内联元素（如&lt;img&gt;）上无法直接使用 text-align 属性。 子孙选择器可以使用子孙选择器来选择嵌套在其他元素中的元素。1234div h2 &#123; ... &#125; /* 选择嵌套在&lt;div&gt;元素中的所有&lt;h2&gt;(包括子元素、孙子元素等) */#elexirs h2 &#123; ... &#125; /* 选择id为elixirs元素中的所有&lt;h2&gt; */#elexirs&gt;h2 &#123; ... &#125; /* 选择id为elixirs的元素中的直接子元素&lt;h2&gt; */h2#elexirs &#123; ... &#125; /* 选择id为elixirs的&lt;h2&gt;元素,注意与以上选择器作区分 */ 属性的快捷形式内外边距的快捷形式1234padding: 0px 20px 30px 10px; /* 依次为上、右、下、左的内边距（顺时针方向） */margin: 0px 20px 30px 10px; /* 与内边距相同的顺时针的规定顺序 */padding: 20px; /* 所有内边距都为20px */margin: 0px 20px; /* 依次指定了上下边距、左右边距 */ 边框和背景的快捷形式边框和被背景的快捷形式没有顺序要求，更加灵活：123border: solid thin #007e7e;border: #007e7e solid thin;background: white url(images/cocktail.gif) repeat-x; 字体属性的快捷形式字体属性的快捷形式如下：1font: font-style font-variant font-weight font-size/line-height font-family; 其中 font-style、font-variant、font-weight、line-height 四个属性是可选的，但必须指定 font-size 和 font-family（必须指定一个字体），如下：1font: small/1.6em Verdana, Helvetica, Arial, sans-serif; &lt;span&gt; &lt;span&gt;内联元素与&lt;div&gt;元素类似，它用于将相关的内联元素和文本归组在一起。 类似于&lt;div&gt;，可以将&lt;span&gt;元素增加到类（或者指定唯一的id），对它们增加自定义的样式。 &lt;a&gt;元素和伪类 Pseudo-class &lt;a&gt;元素具有多种状态：未访问（link）、已访问（visited）、悬停（hover）、聚焦（focus）和活动（active）等，根据状态的不同，需要指定不同的样式。 伪类是内置的类，通过伪类可以单独的为&lt;a&gt;各个状态指定样式。 123456789a:link &#123; color: green;&#125;a:visited &#123; color: red;&#125;a:hover &#123; color: yellow;&#125; 伪类first-child对应元素的第一个子元素，如&lt;blockquote&gt;中的第一个段落，用last-child伪类选择&lt;blockquote&gt;的最后一个段落。 层叠在多个样式表中，对同一个元素的样式规定，如何选择基本遵循以下两个原则： 从规定者来看，按作者、读者和浏览器的优先顺序排列； 从CSS选择器来看，按id、类或伪类、元素名的优先顺序排列。 布局与定位流体布局 liquid layouts浏览器使用流在页面中放置元素。块元素从上向下流，各元素之间有一个换行。默认的，每个块元素会占浏览器窗口的整个宽度。内联元素在块元素内部从左上方流向左下方。如果需要多行，浏览器会换行，在垂直方向上扩展外围块元素，来包含这些内联元素。 正常页面流中两个块元素上下相邻的外边距会折叠为最大外边距的大小，或者如果两个外边距大小相同的，则会折叠为一个外边距（块元素左右相邻不折叠）。 布局方式流体布局是指，扩展浏览器窗口时，页面中的内容会扩展以适应页面。除此之外，还有冻结布局和凝胶布局。 浮动布局 float layouts浮动元素会从正常流中取出，浮动到左边或右边。元素通过 float 属性来实现浮动，其值可以设置为 right 或 left。1234#amazing &#123; /* 指定标识 */ width: 200px; /* 指定宽度，浮动元素必须有特定的宽度，不能设置为auto。 */ float: right; &#125; 浮动元素放在块元素之上，不会影响正常的页面流。不过，内联内容会考虑浮动元素的边界，围绕着这个浮动元素。它非常适合在一个文本段落中浮动图像，让文本围绕着这个图像。 clear属性用来指定一个块元素左边或右边（或者左右两边）不能有浮动元素。设置了clear属性的块属性会下移，知道它旁边没有块元素。1234#footer &#123; ... clear: right /* 指定该元素右边不允许有浮动内容 */&#125; 冻结布局 frozen layouts概念冻结布局是指，其中内容的宽度是固定的，不会随着浏览器窗口扩展或收缩。这有一个好处，可以对设计提供更多控制，不过也要付出代价，这样就不能有效地使用浏览器宽度了。 冻结方式HTML修改增加一个新的&lt;div&gt;元素包围页面中的所有内容（&lt;body&gt;元素中的内容）,指定id（例如“allcontent”）。 CSS修改限定“allcontent” &lt;div&gt;中所有元素的内容大小，使之有一个固定的宽度。123456#allcontent &#123; width: 800px; padding-top: 5px; padding-bottom: 5px; background-color: #675c47&#125; 凝胶布局 jollo layouts凝胶布局是指，其中内容宽度是固定的，但是外边距会随着浏览器窗口扩展或收缩。凝胶布局通常会把内容放在中央。这与冻结布局有同样的好处，不过通常更美观。12345678#allcontent &#123; width: 800px; padding-top: 5px; padding-bottom: 5px; background-color: #675c47 margin-left: auto; margin-right: auto;&#125; 定位position 属性可以设置为4个值： static（静态）、absolute（绝对）、fixed（固定）和relative（相对）。使用绝对、固定和相对定位时，属性top、right、bottom和left可以用来指定元素的位置。 静态定位静态定位是默认方式，将元素放在页面的正常流中。 绝对定位绝对定位允许将元素放在页面上的任何位置。默认地，绝对定位元素会相对于页面边界来放置。如果一个绝对定位元素嵌套在另一个定位元素中，这个元素就会相对于外包含元素（即其父元素）定位。 绝对定位元素可以使用z-index属性分层放置，使一个元素在另一个元素上面。z-index值越大，说明它层次越高（在屏幕上离你越近）。 固定定位固定定位元素总是相对于浏览器窗口定位，页面滚动时，固定定位的元素不会移动。页面中的其他内容会在这些固定定位元素下面正常滚动。 相对定位相对定位元素首先正常流入页面，然后按指定的量偏移，从而流出它们原先所在的空间。 使用相对定位时，left、right、top和bottom是指距正常流中该元素位置的偏移量。 表格显示CSS表格显示允许按一种表格布局来摆放元素。 如何使用表格显示增加HTML结构要创建表格显示，需要使用对应表格的一个块元素，对应行的块元素，以及对应单元格的块元素。通常，这些块元素都是&lt;div&gt;元素（如要使用图像等内联元素，需要将其包装在一个&lt;div&gt;元素中使用）。12345678910&lt;div id="tableContainer"&gt; &lt;!-- 为整个表格指定块元素 --&gt; &lt;div id="talbeRow"&gt; &lt;!-- 为 "main"和"sidebar"对应行指定块元素 --&gt; &lt;div id="main"&gt; &lt;!-- 为 "main" 指定块元素 --&gt; ... &lt;/div&gt; &lt;div id="sidebar"&gt; &lt;!-- 为 "sidebar" 指定块元素 --&gt; ... &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 使用CSS创建表格显示123456789101112131415161718192021222324#tableContainer &#123; display: table; /* 创建整个表格结构 */ border-spacing: 10px; /* 为表格中的单元格指定10像素的边框间距，类似于常规元素的外边距 */&#125;#tableRow &#123; display: table-row; /* 指定该元素以表格行的形式显示 */&#125;/* 以下设置表格中单元格的显示格式 */#main &#123; display: talbe-cell; /* 以表格单元格的形式显示 */ font-size: 105%; background: #efe5d0 url(images/background.gif) top left; padding: 15px; /* margin: 0px 10px 10px 10px 由于表格属性中已经规定 border-spacing，此处无需再规定外边距*/ vertical-align: top; /* vertical-align 属性使得单元格的所有内容相对于单元格上边对齐 */&#125;#sidebar &#123; display: table-cell; font-size: 105%; background: #efe5d0 url(images/background.gif) bottm right; padding: 15px; /* margin: 0px 10px 10px 10px */ vertical-align: top;&#125; vertical-align属性：垂直对齐可以设置为 top（顶端对齐）、middle（中间对齐）、或bottom（底端对齐）,浏览器默认的对齐方式为 middle。列的宽度：可以用 width 属性控制表格列的宽度，通过使用百分数，可以使表格随着浏览器窗口大小的调整扩展和收缩。 双栏布局方案的选择浮动布局的特点使用 float 使边栏浮在页面主内容上，并使用clear确保这个浮动边栏不会与页脚重叠。但存在一些局限： 如果希望浮动元素在某个元素后面，就要让它紧挨着放在哪个元素下面。这样，如果要在页面主内容上浮动某元素，则它需要移动到页眉下，主内容上面，这种顺序并不能反映页面中内容的相对重要性。 使用 float时，无法创建两个高度相同的列。 凝胶布局的特点凝胶布局中，由一个固定大小的&lt;div&gt;包围页面中的所有内容，然后利用auto属性允许外边距扩展,从而提供了一个适当居中，固定大小的页面。这要就解决了内容顺序的问题，但其缺点在于，内容不会扩展来填满整个浏览器窗口（虽然很多人可能根本不认为这是一个缺点）。 绝对布局的特点使用绝对定位能保证内容的顺序不会被布局打乱。通过将边栏设置为一个特定的宽度，并将其定位在主内容右边，就有了一个可以随页面大小扩展和收缩的主内容区，而边栏会一致保持固定的的大小固定在浏览器窗口右侧。 如果希望页面的某一部分大小固定，而另一部分可以扩展和收缩，这就是一个很好的布局选择；或者如果需要精确地指定某个元素的位置，也很适合选择绝对定位。 不过这种布局在此处存在一个缺点：浏览器变宽时，边栏会再次覆盖页脚。 表格显示布局的特点通过在HTML结构使用&lt;div&gt;，形成表格显示布局，可以得到完美对齐的两列，而且可以随浏览器窗口的大小扩展和收缩。如果需要建立多栏布局，而且内容栏是均匀的，表格显示就是一个很好的布局策略。 HTML5标记HTML5为HTML增加了很多新元素，但较早的浏览器不支持新的HTML5元素，所以一定要知道主要用户使用哪些浏览器访问你的Web页面，除非能确保新元素对你的用户适用，否则不要贸然使用这些新元素。 div元素和HTML5新元素&lt;section&gt;用于对相关的内容分组。 &lt;article&gt;用于类似博客帖子、论坛帖子和新闻报道等独立的内容。 &lt;aside&gt;用于表示不作为页面主内容的次要内容，如插图和边栏。 &lt;nav&gt;用于组织网站导航链接。 &lt;header&gt;将标题、logo和署名等通常放在页面或区块最上方的内容组织在一起。 &lt;footer&gt;将诸如文档信息、法律措辞和版权说明等通常在页面或区块最下方的内容组织在一起。 &lt;time&gt;用来标记时间和日期。 &lt;div&gt;仍然用于建立结构。它通常将元素组织在一起来指定样式，或者有些内容可能不适合放在HTML5中那些与结构相关的新元素中，这些内容就可以使用&lt;div&gt;创建结构。 video元素&lt;video&gt;用于为页面增加视频。 视频编码是用来创建视频文件的编码。常用的编码包括h.264、Vp8和Theora。 视频同期文件包含视频、音频和元数据。流行的容器格式包括MP4、OGG和WebM。 要提供多个视频源文件，确保你的用户可以在他们的浏览器中观看你的视频文件。 表格与更多列表表格的基本使用HTML表格使用元素&lt;table&gt;、&lt;tr&gt;、&lt;th&gt;、&lt;td&gt;建立表格数据结构。其中&lt;table&gt;元素定义并包围整个表格，&lt;tr&gt;元素按行定义，&lt;td&gt;元素定义每行包含的一个或多个数据单元格，&lt;th&gt;元素表示作为行或列表格的数据单元格。 可以用&lt;caption&gt;元素提供关于表格的额外信息（表格标题）。 表格边框和边距表格数据单元格有内边距和边框,也有边框间距（border-spacing，相当于外边距，也就是单元格之间的间距）。 border-collapse是针对表格的一个特殊的CSS属性，允许将单元格边框合并为一个边框，让外观更简洁。 表格的CSS表现可以用text-align和vertical-align CSS属性改变表格单元格中数据的对齐方式。 可以用background-color属性为表格增加颜色。可以为整个表格、各行或者单个的数据单元格增加背景颜色。 使用CSS nth-child伪类可以为表格隔行增加背景颜色。123456tr:nth-child(even) &#123; background-color: #fcba7a;&#125;tr:nth-child(odd) &#123; background-color: green;&#125; 表格的进阶使用如果一个数据单元格没有数据，&lt;td&gt;元素中不放置任何内容。不过，需要使用一个&lt;td&gt;......&lt;/td&gt;元素维持表格的对齐。 如果数据单元格需要跨多行或多列，可以使用&lt;td&gt;元素的rowspan或colspan属性。 可以在表格中嵌套表格，将&lt;table&gt;元素及其所有内容放在一个数据单元格中。 列表的更多使用list-style-type用于指定列表中使用的项目符号。123456li &#123; list-style-type: dics; /* 默认的列表标记类型，为实心圆形标记 */ list-style-type: circle; /* 空心圆形标记 */ list-style-type: square; /* 方块标记 */ list-style-type: none; /* 无列表标记 */&#125; list-style-image允许指定列表标记图像。12345li &#123; list-style-image: url(images/backpack.gif); padding-top: 5px; margin-left: 20px;&#125; HTML表单form 元素&lt;form&gt;元素定义了表单，所有表单输入元素都嵌套在这个元素中。123&lt;form action="http://wickedlysmart.com/hfhtmlcss/contest.php" method="POST"&gt; ...&lt;/form&gt; method属性包含发送表单数据的方法，可以是POST或GET。POST打包表单数据，并把它作为请求的一部分发送到服务器。GET打包表单数据，并把数据追加到URL。如果表单数据应当是私有的，或者表单数据很多，如使用了一个&lt;textarea&gt;或者file &lt;input&gt;元素，就应当使用POST。对于可以加书签的请求，要使用GET，如查看当前时事的表单。 input 元素&lt;input&gt;元素是一个void元素，在Web页面上可以作为多种不同的输入控件，这取决于它的type属性值。 文本输入text &lt;input&gt;元素用于输入一行文本。它还有一些可选的属性，允许为这个控件设置最大字符个数和宽度。1&lt;input type="text" name="fullname" maxlength="100" value="type something"&gt; text 类型中的 value属性可以用来为单行文本输入控件提供一个初始值 Placeholder 属性表单中大多数不同类型的&lt;input&gt;元素都可以使用 placeholder 属性，这会为表单用户提供一个提示，指出你希望在一个输入域中输入什么内容。1&lt;input type="text" placeholder="China"&gt; Country： Requiredrequired属性指示一个输入域是必要的，要让表单成功提交，这个输入域中必须有值。1&lt;input type="text" placeholder="China" required="required"&gt; 提交输入submit &lt;input&gt;元素会创建一个按钮，允许提交表单。点击这个按钮时，浏览器会把表单发送到服务器脚本进行处理。1&lt;input type="submit" value="updata"&gt; 在提交按钮上设置value属性可以改变按钮上显示的文本。 单选钮输入radio &lt;input&gt;元素会创建包含多个按钮的控件，所有同名的单选钮构成一组互斥的按钮。12&lt;input type="radio" name="hotornot" value="hot"&gt;&lt;input type="radio" name="hotornot" value="not"&gt; 复选框输入checkbox &lt;input&gt;元素会创建一个复选框控件，通过为多个复选框指定相同的名字，可以创建一组选择。123&lt;input type="checkbox" name="spice" value="Salt"&gt;&lt;input type="checkbox" name="spice" value="Pepper"&gt;&lt;input type="checkbox" name="spice" value="Garlic"&gt; 文件输入file 类型会创建一个文件输入控件，允许选择一个文件，表单提交时，文件的内容会随其他的表单数据意思发送给服务器。使用这个元素的前提是必须使用POST方法。1&lt;input type="file" name="doc"&gt; HTML5新增的其他输入类型数字输入number &lt;input&gt;元素会创建一个只允许数字字符的单行文本输入控件，还可以用可选的属性指定这个元素允许的最小数和最大数。1&lt;input type="number" min="0" max="20"&gt; 范围输入range &lt;input&gt;元素会创建一个滑动条控件提供数字输入。number和range都有一个可选的step属性，可以用来指定值的间隔数（步长）。1&lt;input type="range" min="0" max="20" step="5"&gt; 颜色输入color 类型会在支持这个类型的浏览器中创建一个颜色选择器（否则只会创建一个普通的文本输入控件）。1&lt;input type="color"&gt; 日期输入date 类型会在迟滞这个类型的浏览器中创建一个日期选择器。12345678910111213141516171819&lt;input type="date"&gt;``` &lt;input type="date"&gt;#### email、Tel和URL输入```html&lt;input type="email"&gt;&lt;input type="tel"&gt;&lt;input type="url"&gt;``` Email: &lt;input type="email"&gt; Phone: &lt;input type="tel"&gt; URL: &lt;input type="url"&gt; 这三种 input 类型在桌面浏览器上看不出任何差别。不过在移动浏览器上，它们会得到一个定制键盘，可以更容易地输入需要的字符，如`/`、@和数字。## 其他表单元素### 文本区`&lt;textarea&gt;`元素会创建一个多行文本输入区。```html&lt;textarea name="comments" cols="10" rows="48"&gt;这是初始文本&lt;/textarea&gt; 这是初始文本rows属性指定文本区高度为多少个字符，cols属性指定文本区宽度为多少个字符，开始和结束标记之间的左右文本会成为浏览器文本区空间中的初始文本。 菜单控件&lt;select&gt;元素会创建一个菜单，包含一个或多个&lt;option&gt;元素。&lt;option&gt;元素定义了菜单中的菜单项。1234567&lt;select name="characters" multiple="multiple"&gt; &lt;!-- 若增加布尔属性multiple，则变成一个多选菜单 --&gt; &lt;option value="Buckaroo"&gt;Buckaroo Banzai&lt;/option&gt; &lt;option value="Tommy"&gt;Perfect Tommy&lt;/option&gt; &lt;option value="Penny"&gt;Penny Priddy&lt;/option&gt; &lt;option value="Jersey"&gt;New Jersey&lt;/option&gt; &lt;option value="John"&gt;John Parker&lt;/option&gt;&lt;/select&gt; Buckaroo Banzai Perfect Tommy Penny Priddy New Jersey John Parker]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo博客搭建记录]]></title>
      <url>%2F2016%2F12%2F17%2Fhexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[准备工作GitHub Pages 注册 GitHub 建立名为 username.github.io 的仓库,其中username为自己GitHub的账户名 Node.js 下载安装Node.js Git工具 下载安装 git，在安装完成后，需输入姓名和电子邮箱记录身份以便后期识别： 12$ git config --global user.name "Your Name"$ git config --global user.email "email@example.com" 另一选项：下载安装GitHub Desktop并登录 配置本电脑的 SSH key 至 GitHub的keys 使用Hexo创建框架安装Hexo命令行工具1$ npm install hexo-cli -g 初始化123$ hexo init hexo #在当前目录下创建一个名为hexo的工作目录并初始化或者$ hexo init #以当前目录为工作目录并初始化 本地部署并预览1234$ hexo generate #在工作目录下渲染生成博客网站所需要的所有文件$ hexo server #在本地启动服务以供预览或者$ hexo s -g 浏览器打开 localhost:4000/即可进行预览。 部署至 GitHub 修改配置文件在工作目录下找到 _config.yml 文件（站点配置文件），定位到其中的 depoly 标签，填入相关信息如下：123456# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repository: https://github.com/firber/firber.github.io.git branch: master 其中 repository 填入之前新建仓库的地址，保存退出。 安装几个插件 123$ npm install hexo-deployer-git --save #方便使用`hexo deploy`命令发布博客$ npm install hexo-generator-feed --save #使网站支持RSS订阅$ npm install hexo-generator-sitemap --save #生成sitemap供搜索引擎抓取 部署到 GitHub pages 1$ hexo d -g 到 username.github.io查看。 换行编码问题若在部署时出现以下类似提示信息：1234The file will have its original line endings in your working directory.warning: LF will be replaced by CRLF in js/src/motion.js.The file will have its original line endings in your working directory.warning: LF will be replaced by CRLF in js/src/post-details.js. 可使用以下命令关闭换行编码转换：1git config --global core.autocrlf false 具体情况参见Git的文档说明： 假如你正在Windows上写程序，又或者你正在和其他人合作，他们在Windows上编程，而你却在其他系统上，在这些情况下，你可能会遇到行尾结束符问题。这是因为Windows使用回车和换行两个字符来结束一行，而Mac和Linux只使用换行一个字符。虽然这是小问题，但它会极大地扰乱跨平台协作。 Git可以在你提交时自动地把行结束符CRLF转换成LF，而在签出代码时把LF转换成CRLF。用core.autocrlf来打开此项功能，如果是在Windows系统上，把它设置成true，这样当签出代码时，LF会被转换成CRLF：1$ git config --global core.autocrlf true Linux或Mac系统使用LF作为行结束符，因此你不想 Git 在签出文件时进行自动的转换；当一个以CRLF为行结束符的文件不小心被引入时你肯定想进行修正，把core.autocrlf设置成input来告诉 Git 在提交时把CRLF转换成LF，签出时不转换：1$ git config --global core.autocrlf input 这样会在Windows系统上的签出文件中保留CRLF，会在Mac和Linux系统上，包括仓库中保留LF。 如果你是Windows程序员，且正在开发仅运行在Windows上的项目，可以设置false取消此功能，把回车符记录在库中：1$ git config --global core.autocrlf false 发表文章发表流程使用命令行：1$ hexo n newpost 执行命令后，会在\source\_posts下生成一个新的newpost.md文件（文章发表后newpost会作为文章名显示在URL上），用Markdown编辑器打开编写即可。写完后，推送至服务器上：1$ hexo d -g 文章格式Hexo默认使用Markdown语法写文章，对于如何用Markdown语法写文章，推荐以下教程资料： Markdown 语法说明 (简体中文版) Learning-Markdown (Markdown 入门参考) Markdown——入门指南除了按照Markdown的语法写文章外，文章开头（Hexo中称为 Front-matter）推荐按照以下格式提供一些必要信息(以本篇文章为例）：12345678910title: hexo博客搭建记录 #文章页面的标题，与文章md文件名不同，不会出现在URL上date: 2016-12-17 18:58:02 #文章生成时间，若不填写此项，默认以发布时间为准categories: 器 #文章分类tags: #文章标签 - hexo - github---记录在Github上使用Hexo搭建本博客的经历，本地系统为Windows。#文章摘要&lt;!-- more --&gt;正文开始 文章编写Markdown编辑器Markdown编辑器有很多，个人使用 Sublime Text 3配合MarkdownEditing(SublimeText下写作利器之MarkdownEditing)和OmniMarkupPreviewer（近乎完美的 Markdown 写作体验 - Sublime Text 3 + OmniMarkupPreviewer）两款插件来编辑Markdown文本。安装方法参见介绍Sublime3下两款Markdown插件。安装完成后，可以有许多增强功能，常见的有： 语法高亮 Ctrl+Win+V 快捷键插入链接 Shift+Win+K 快捷键插入图片 Ctrl+1-6 快捷键设置1至6级标题 Ctrl+Alt+O 快捷键在浏览器中预览 Ctrl+Alt+X 快捷键导出HTML 更详细的使用说明可参见插件的官方文档。 文章格式化前文提到在文章正文开始前需提供一些标题之类的必要信息，在 Sublime Text 中可以通过自定义插件格式化输入内容。详细的步骤如下： 菜单栏：Tools -&gt; Developer -&gt; New Plugin 在打开的插件模板文件中，使用下面的内容覆盖 12345678910111213141516171819import datetimeimport sublime,sublime_pluginclass AddPostHeaderCommand(sublime_plugin.TextCommand): def run(self, edit): self.view.run_command("insert_snippet", &#123; "contents": "title: ""\n" "date: %s" %datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S") +"\n" "categories: ""\n" "tags: ""\n" " - tag1""\n" "&lt;!-- comments: false --&gt;\n" "---\n" "正文摘要\n" "&lt;!-- more --&gt;\n" "正文开始" &#125; ) Ctrl+S保存文件，文件名随便定义，确认保存位置为 Data\Packages\User\ 绑定快捷键：菜单栏 Preferences -&gt; Key Bindings -&gt; User，使用以下内容覆盖 123[ &#123;"keys": ["ctrl+shift+f5"], "command": "add_post_header" &#125;] 保存设置，在新建的文章开头使用快捷键Ctril+Shift+F5，即可快速插入。 个性化设置安装主题hexo主题有很多，可自行查找。此处以 next为例。 安装主题12cd hexogit clone https://github.com/iissnan/hexo-theme-next themes/next # 将next主题文件夹拷贝到工作目录的themes子目录中。 打开配置文件，定位到 theme 字段，将其值更改为 next，重新部署至Github。 主题配置具体见 next的官方文档。添加文章更新时间打开themes/next/_config.yml（主题配置文件），定位Post Settings，修改相应内容如下：12post_meta: updated_at: true 添加站内搜索NexT的搜索服务有好几种，以下介绍下试用过的几种。 Algolia搜索具体操作可参考以下两篇文章： hexo+next添加algolia搜索 Hexo+Next主题集成Algolia搜索 在使用过程中，使用hexo algolia命令时还遇到了一个错误：12345678910111213$ hexo algoliaINFO Start processingINFO [Algolia] Identified 2 posts to index.INFO [Algolia] Clearing index...INFO [Algolia] Index cleared.INFO [Algolia] Starting indexation...E:\hexo\node_modules\hexo-algolia\lib\command.js:85 throw err; ^AlgoliaSearchError: Record at the position 0 objectID=588a1be154715030362be51793dd4b4941da1b57 is too big size=113468 bytes. Contact us if you need an extended quota at success (E:\hexo\node_modules\algoliasearch\src\AlgoliaSearchCore.js:332:32) at process._tickCallback (internal/process/next_tick.js:103:7) 简单来讲，就是文章大小超过限制，无法生成相应的索引，官网还有解释 Is there a size limit for my index/records?。通常来讲，一般情况下是不会出现超限的，只是被我碰巧遇上了。 总的来说，Algolia搜索整起来偏繁琐，需要设置的东西有点多。所以后来转向 local search。 Local SearchLocal Search的添加方法非常简单。 安装 hexo-generator-searchdb，在站点的根目录下执行以下命令： 1$ npm install hexo-generator-searchdb --save 编辑站点配置文件，新增以下内容： 12345search: path: search.xml field: post format: html limit: 10000 以下为 Local Search 的使用示例： 域名设置Using a custom domain with GitHub Pages 域名申请域名提供商有很多，如 国外的godaddy、name、namecheap，国内的万网，具体的域名比价可以参考 Domain Name Price and Availability 这个网站。除了价格原因，如何选择一个靠谱的域名提供商，网上有很多对比文章，比如月光博客的 《国内国外注册域名的对比》。长远而言，在国外注册域名似乎更“灵活”，但我查了下godaddy，个人隐私保护还需要额外付费，总体价格也不是很有优势，于是选择了万网。 万网的.com 域名新注册域名55元/年，续费60元/年，加上新用户送的16元优惠券，最少39元首年拿下（关注“阿里云域名”微信公众号还可以获得最新优惠口令，减免10元，但不与优惠券重叠）。 2016年7月18日起，在万网上注册 .com/.net 域名也必须进行域名实名认证，详见 万网帮助文档。 域名绑定参见GitHub Pages的帮助文档，具体步骤如下： 在Hexo目录下/source文件夹中创建包含URL的 CNAME 文件，此处为 blog.firber.com（注：不要在GitHub端创建包含URL的 CNAME 文件，虽然完成设置后能正常使用，但在下一次本地提交部署后会更新文件，导致CNAME 文件被删除，最后出现404错误）。 到万网的域名控制台中，定位到“解析设置”，添加解析 CNAME，主机名为blog，记录值为原有的 GitHub Pages 地址加上点号，此处为firber.github.io.。 等待几分钟后，访问blog.firber.com就能看到与firber.github.io.相同的页面，证明绑定成功了。 其他参考资料 用 GitHub + Hexo 建立你的第一个博客 3分钟快速在Github pages上免费搭建Hexo博客 如何搭建一个独立博客——简明Github Pages与Hexo教程(内容详实，推荐) Mac上搭建基于GitHub的Hexo博客 Hexo官方文档 hexo+next添加algolia搜索(此处官方文档有误，需在 themes\next\layout_partials\header.swig 中增加相应语句) Tips for Hexo configuration GitHub Pages 官方页面]]></content>
    </entry>

    
  
  
</search>
