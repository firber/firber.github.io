<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>firber&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-23T06:44:40.975Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>firber</name>
    <email>wangjingze1987@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Head First HTML 与CSS（第2版）》读书笔记</title>
    <link href="http://yoursite.com/2017/01/04/%E3%80%8AHead%20First%20HTML%20%E4%B8%8ECSS%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/01/04/《Head First HTML 与CSS（第2版）》读书笔记/</id>
    <published>2017-01-04T06:36:23.000Z</published>
    <updated>2017-01-23T06:44:40.975Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://feliving.github.io/" target="_blank" rel="external">《Head First HTML 与CSS（第2版）》</a>是比较基础的入门书，快速过一遍，了解HTML和CSS最基本的概念和知识。<br><img src="https://img3.doubanio.com/lpic/s27104165.jpg" alt="book cover"><br><a id="more"></a></p>
<h1 id="认识HTML"><a href="#认识HTML" class="headerlink" title="认识HTML"></a>认识HTML</h1><h2 id="标记语言"><a href="#标记语言" class="headerlink" title="标记语言"></a>标记语言</h2><ul>
<li>Web服务器存储并提供由HTML和CSS创建的网页。浏览器获取页面，并根据HTML和CSS显示网页的内容。</li>
<li>HTML 是超文本标记语言 (HyperText Markup Language) 的缩写，用以建立网页的结构。</li>
<li>CSS是层叠样式表 (Cascading Style Sheets) 的缩写，用以控制HTML的表现。</li>
<li>大部分空白符（制表符、回车、空格）都会被浏览器忽略，不过可以利用空白符让HTML更有可读性。</li>
<li>注释的格式为： <code>&lt;!-- 我是注释内容，可以写为多行 --&gt;</code> </li>
</ul>
<h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><ul>
<li>通过HTML，我们利用标记来标示内容提供结构。我们把匹配标记以及它们包围的内容称为元素。</li>
<li>元素由3部分组成：<strong>开始标记 + 内容 + 结束标记</strong>。不过有些元素（比如<code>&lt;img&gt;</code>）有所例外。</li>
<li>开始标记可以有属性，如下文的 <code>type</code>。</li>
<li>结束标记在左尖括号后面、标记名前面有一个“/”，以明确这是结束标记。</li>
<li>所有页面都要有一个<code>&lt;html&gt;</code>元素,其中要有一个<code>&lt;head&gt;</code>元素和一个<code>&lt;body&gt;</code>元素。</li>
<li>网页的信息放在<code>&lt;head&gt;</code>元素里。</li>
<li><code>&lt;body&gt;</code>元素里的内容就是你将在浏览器里看到的东西。</li>
</ul>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul>
<li>可以在<code>&lt;style&gt;</code>元素中写CSS规则，为HTML网页增加CSS。<code>&lt;style&gt;</code>元素总要放在<code>&lt;head&gt;</code>元素里。</li>
<li><code>&lt;style&gt;</code>元素有一个名为<code>type</code>的（可选的）属性，告诉浏览器你在使用什么类型的样式，由于要使用CSS，所以可以指定“text/css”类型。</li>
<li>可以使用CSS在HTML中指定元素的特性。<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Starbuzz Coffee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">            body &#123;</div><div class="line">                background-color: #d2b48c;</div><div class="line">                margin-left: 20%;</div><div class="line">                margin-right: 20%;</div><div class="line">                border: 2px dotted black;</div><div class="line">                padding: 10px 10px 10px 10px;</div><div class="line">                font-family: sans-serif;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Starbuzz Coffe Beverages<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>House Blend, $1.49<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>A smooth, mold blend of coffees from Mexico, Bolivia and Guatemala.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Mocha Caffe Latte, $2.35<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>A mixture of espresso, steamed milk and milk foam.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Chai Tea, $1.85<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>A spicy drink made with black tea, spices, milk and honey.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="深入了解超文本"><a href="#深入了解超文本" class="headerlink" title="深入了解超文本"></a>深入了解超文本</h1><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><ul>
<li>使用<code>&lt;a&gt;</code>元素从一个页面链接到另一个页面</li>
<li><code>&lt;a&gt;</code>元素的<code>href</code>属性指定链接的目标文件。</li>
<li><code>&lt;a&gt;</code>元素的内容是链接的标签，即在网页上看到的链接文本，文字和图像都可以用作链接的标签。</li>
<li>单击一个链接时，浏览器会加载<code>href</code>属性中指定的Web页面。<h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2></li>
<li>相对路径是相对于链接的源Web页面指向网站中其他文件的一个链接。</li>
<li>“..”表示“父文件夹”，使用“..”可以连接到源文件上一层文件夹中的一个文件。</li>
<li>记住要用“/”字符分隔路径中的各个部分。</li>
<li>为网站选择的文件名和文件夹名中不要使用空格。</li>
<li>最好在构建网站初期组织网站文件，这样就不用再网站升级时修改一大堆的路径了。</li>
</ul>
<h1 id="构建模块"><a href="#构建模块" class="headerlink" title="构建模块"></a>构建模块</h1><h2 id="页面规划"><a href="#页面规划" class="headerlink" title="页面规划"></a>页面规划</h2><ul>
<li>开始输入内容之前要规划好Web页面的结构。首先画出一个草图，然后创建一个略图，最后再写出HTML。</li>
<li>尽可能使用元素来告诉浏览器你的内容的含义，而不是变现形式。</li>
<li>规划页面时，首先设计大的块元素，然后用内联元素完善。</li>
<li>一定要使用与内容含义最接近的元素。如果需要一个列表，就不要使用段落元素。<h2 id="块元素和内联元素"><a href="#块元素和内联元素" class="headerlink" title="块元素和内联元素"></a>块元素和内联元素</h2></li>
<li>块元素通常用作Web页面中的主要构建模块，内联元素往往用来标记小段内容。</li>
<li><code>&lt;p&gt;</code>、<code>&lt;blockquote&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;ul&gt;</code>和<code>&lt;li&gt;</code>都是块元素，它们单独显示，在内容前后分别有一个换行（默认地）。</li>
<li><code>&lt;q&gt;</code>和<code>&lt;em&gt;</code>是内联元素。这些元素中的内容与其包含元素的其余内容放在一起。</li>
</ul>
<h2 id="void元素"><a href="#void元素" class="headerlink" title="void元素"></a>void元素</h2><ul>
<li>void元素没有内容，只有一个标记组成。</li>
<li>为方便使用，可省略void元素的结束标记，只使用一个开始标记。</li>
<li><code>&lt;br&gt;</code>和<code>&lt;img&gt;</code>是void元素。</li>
</ul>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li>要结合两个元素建立一个HTML列表：将每个列表项放在一个<code>&lt;li&gt;</code>元素中，用<code>&lt;ol&gt;</code>和<code>&lt;ul&gt;</code>元素包围以上<code>&lt;li&gt;</code>元素。</li>
<li><code>&lt;ol&gt;</code> (ordered list)是有序列表,会自动为列表创建序号；<code>&lt;ul&gt;</code> (unordered list)是无序列表。</li>
</ul>
<h2 id="嵌套元素"><a href="#嵌套元素" class="headerlink" title="嵌套元素"></a>嵌套元素</h2><ul>
<li>嵌套元素是指完全包含在另一个元素中的元素。如果元素能正确地嵌套，所有标记都能正确匹配。</li>
<li>可以在列表中建立嵌套列表，将<code>&lt;ol&gt;</code>和<code>&lt;ul&gt;</code>元素放在<code>&lt;li&gt;</code>元素中。</li>
</ul>
<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><table>
<thead>
<tr>
<th>字符</th>
<th>字符实体</th>
</tr>
</thead>
<tbody>
<tr>
<td>&gt;</td>
<td><code>&amp;gt;</code></td>
</tr>
<tr>
<td>&lt;</td>
<td><code>&amp;lt;</code></td>
</tr>
<tr>
<td>&amp;</td>
<td><code>&amp;amp;</code></td>
</tr>
<tr>
<td>&copy;</td>
<td><code>&amp;copy;</code></td>
</tr>
<tr>
<td>&reg;</td>
<td><code>&amp;reg;</code></td>
</tr>
<tr>
<td>&yen;</td>
<td><code>&amp;yen;</code></td>
</tr>
<tr>
<td>&trade;</td>
<td><code>&amp;trade;</code></td>
</tr>
</tbody>
</table>
<p>更多的可以参考 <a href="http://www.jb51.net/onlineread/htmlchar.htm" target="_blank" rel="external">HTML特殊字符编码对照表</a></p>
<h1 id="连接起来"><a href="#连接起来" class="headerlink" title="连接起来"></a>连接起来</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><ul>
<li>URL是统一资源定位符 (Uniform Resource Locators)，用以标识Web上的任何资源。</li>
<li>典型的URL由一个协议、一个网站名和资源的一个绝对地址组成。</li>
<li>HTTP，超文本传输协议 (HyperText Transfer Protocol) 是一个请求和响应协议，用以在Web服务器和浏览器之间传送Web页面。</li>
</ul>
<h2 id="访问请求"><a href="#访问请求" class="headerlink" title="访问请求"></a>访问请求</h2><ul>
<li>如果请求内容是一个目录而没有指定文件名，则Web服务器会查找一个默认页面并返回到浏览器。“index.html”和“default.htm”都是默认页面。</li>
<li>正常的Web服务器几乎都在端口80接收请求。如果没有指定端口，则默认为80。</li>
</ul>
<h2 id="lt-a-gt-元素的新应用"><a href="#lt-a-gt-元素的新应用" class="headerlink" title="&lt;a&gt;元素的新应用"></a><code>&lt;a&gt;</code>元素的新应用</h2><ul>
<li><code>&lt;a&gt;</code>元素的href属性中可以使用相对路径或URL来链接其他Web页面。一般而言，内部页面使用相对路径，对外部链接才使用URL。</li>
<li>可以使用<code>id</code>属性为页面的某个元素创建一个目标位置。在<code>&lt;a&gt;</code>元素的href属性使用<code>#</code>后面加一个目标id，可以连接到页面中的那个目标位置。</li>
<li>为了便于访问，可以在<code>&lt;a&gt;</code>元素中使用<code>title</code>属性提供链接的一个描述。</li>
<li>使用<code>target</code>属性在另一个浏览器窗口中打开链接。不过，对于使用不同设备和浏览器的用户，可能会有不相同的表现。<br><strong>以下为示例代码：</strong><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Read the <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://wickedlysmart.com/buzz/index.html#Coffee"</span> </span></div><div class="line">        <span class="attr">title</span>=<span class="string">"Read all about caffeine on the Buzz"</span>&gt;Caffeine Buzz<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="增加图像"><a href="#增加图像" class="headerlink" title="增加图像"></a>增加图像</h1><h2 id="lt-img-gt-元素的应用"><a href="#lt-img-gt-元素的应用" class="headerlink" title="&lt;img&gt;元素的应用"></a><code>&lt;img&gt;</code>元素的应用</h2><h3 id="lt-img-gt-的基本使用"><a href="#lt-img-gt-的基本使用" class="headerlink" title="&lt;img&gt;的基本使用"></a><code>&lt;img&gt;</code>的基本使用</h3><ul>
<li>使用<code>&lt;img&gt;</code>元素在Web页面中放置图像。</li>
<li>浏览器读取HTML页面之后，要先从Web服务器<strong>获取图像</strong>再显示，这与其他元素稍有不同。</li>
<li><code>&lt;img&gt;</code>元素是一个内联元素，浏览器不会在图像前后插入一个换行。</li>
<li>如果Web页面上有多个大图像，可以通过创建图像的缩略图使页面更可用，下载得更快。缩略图可以链接到原来的大图像上，这样当用户单击这些缩略图时可以看到原来的大图像。</li>
</ul>
<h3 id="lt-img-gt-的属性"><a href="#lt-img-gt-的属性" class="headerlink" title="&lt;img&gt;的属性"></a><code>&lt;img&gt;</code>的属性</h3><ul>
<li><code>src</code>属性指定图像文件的位置，可以使用相对路径包含本地网站中的图像，也可以使用URL包含其他网站的图像。</li>
<li><code>alt</code>属性是对图像的一个有意义的描述。在一些浏览器中，如果无法找到图像，就会显示这个描述。</li>
<li><code>&lt;img&gt;</code>元素的<code>width</code>和<code>height</code>属性可以使用<strong>像素数</strong>提前指定图像的宽度和高度，从而让浏览器在获取图像前就开始建立图像的页面布局（<em>但并不推荐如此调整图像大小，因为浏览器仍然需要获取整个图像</em>）。</li>
</ul>
<h2 id="图像的知识"><a href="#图像的知识" class="headerlink" title="图像的知识"></a>图像的知识</h2><h3 id="图像格式"><a href="#图像格式" class="headerlink" title="图像格式"></a>图像格式</h3><p>JPEG、PNG和GIF是Web浏览器广泛支持的3种图像格式。</p>
<h4 id="JPEG"><a href="#JPEG" class="headerlink" title="JPEG"></a>JPEG</h4><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul>
<li>可以表示包含多达1600万种不同颜色的图像。</li>
<li>可以按不同质量压缩，可以很好地权衡图像质量和文件大小来满足实际需求。</li>
<li>是一种“有损”格式，压缩文件大小时会丢掉图像的一些信息。</li>
<li>不支持透明度</li>
<li>不支持动画。</li>
</ul>
<h5 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h5><p>适合连续色调图像，如照片和其他复杂图像。</p>
<h4 id="PNG和GIF"><a href="#PNG和GIF" class="headerlink" title="PNG和GIF"></a>PNG和GIF</h4><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ul>
<li>PNG有种不同的大小选择：PNG-24（支持数百万种颜色）、PNG-16（支持数千种颜色），以及PNG-8（支持256种颜色），可以根据需要来选择。</li>
<li>GIF可以表示最多256种不同颜色的图像。</li>
<li>PNG和GIF会压缩文件来缩小文件大小，不过不会丢失信息，是一种“无损”格式，但文件往往也更大。</li>
<li>PNG允许将颜色设置为“透明”，GIF只允许一种颜色设置为“透明”，PNG能提供比GIF更好的透明度控制。</li>
<li>GIF支持动画。</li>
</ul>
<h5 id="适用范围-1"><a href="#适用范围-1" class="headerlink" title="适用范围"></a>适用范围</h5><p>适合保存logo和其他包含单色、线条或文本的简单图形。</p>
<h2 id="图像的编辑"><a href="#图像的编辑" class="headerlink" title="图像的编辑"></a>图像的编辑</h2><ul>
<li>太大的图像会使Web页面难以使用，下载和显示都很慢，可使用照片编辑应用如 Photoshop Elementsis 调整图像的大小。</li>
<li>在 Photoshop Elementsis 中，使用 “Save for Web” 对话框中的 Matte（蒙版）颜色菜单来选择合适的颜色（与背景色相同），柔化PNG或GIF图像的边缘。</li>
</ul>
<h1 id="标准及其他"><a href="#标准及其他" class="headerlink" title="标准及其他"></a>标准及其他</h1><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><ul>
<li>每个页面都要从一个文档类型定义 (doctype) 开始，来告诉浏览器你使用的HTML版本。</li>
<li>紧接着doctype，<code>&lt;html&gt;</code>元素必须是Web页面的最顶层元素，页面中的所有其他内容都嵌套在这个元素中。</li>
<li>只有<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>元素能直接放在<code>&lt;html&gt;</code>元素中，其他元素都必须放在这两个元素中。</li>
<li><code>&lt;head&gt;</code>元素中的<code>&lt;meta&gt;</code>标记告诉浏览器内容类型和字符编码等关于一个Web页面的额外信息。</li>
<li>大多数Web页面的HTML文件都使用utf-8编码，因此应在<code>&lt;head&gt;</code>中包含一个<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>标记。</li>
<li>一定要在<code>&lt;head&gt;</code>元素中包含一个<code>&lt;title&gt;</code>属性。</li>
<li>alt属性是<code>&lt;img&gt;</code>元素中的必要属性。<h2 id="W3C验证工具"><a href="#W3C验证工具" class="headerlink" title="W3C验证工具"></a>W3C验证工具</h2><a href="http://validator.w3.org" target="_blank" rel="external">W3C验证工具</a>可以检查页面是否符合HTML5标准。<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Head First Lounge<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcom to the New and Improved Head First Lounge<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"drinks.gif"</span> <span class="attr">alt</span>=<span class="string">"Drinks"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        Join us any evening for refreshing</div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"elixir.html"</span>&gt;</span>elixirs<span class="tag">&lt;/<span class="name">a</span>&gt;</span>, conversation and</div><div class="line">        maybe agame or two of <span class="tag">&lt;<span class="name">em</span>&gt;</span>Dance Dance Revolution<span class="tag">&lt;/<span class="name">em</span>&gt;</span>.</div><div class="line">        Wireless access is always provided; BYOWS (Bring your own Web server).</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Directions<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        You'll find us right in the center of downtown</div><div class="line">        Webville. If you need help finding us, check out our</div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"directions.html"</span>&gt;</span>detailed derections<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</div><div class="line">        Come join us!</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="CSS入门"><a href="#CSS入门" class="headerlink" title="CSS入门"></a>CSS入门</h1><h2 id="CSS基本语法"><a href="#CSS基本语法" class="headerlink" title="CSS基本语法"></a>CSS基本语法</h2><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ul>
<li>CSS包含一些简单语句，称为规则，每个规则为选择的一些HTML元素提供样式。</li>
<li>典型的规则包括一个选择器，以及一个或多个属性和值。</li>
<li><strong>注释</strong>：如果要注释CSS语句，将其包围在<code>/*</code>和<code>*/</code>之间。<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: sans-serif;</div><div class="line">    <span class="attribute">color</span>:       gray;</div><div class="line">    <span class="comment">/* 这里是CSS注释内容 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid black;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">color</span>: maroon;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul>
<li>选择器指定规则将应用到哪些元素。</li>
<li>通过用逗号分隔元素名，可以一次选择多个元素。</li>
</ul>
<h4 id="元素类"><a href="#元素类" class="headerlink" title="元素类"></a>元素类</h4><ul>
<li><p>可以通过给元素添加<code>class</code>属性将其归到某一类中，元素可以添加多个类名，类名之间用空格分隔。如</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"raspberry blueberry greentea"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>通过“<strong>元素名.类名</strong>”的形式在CSS中选中该类中的一个特定元素指定规则。如</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-class">.greentea</span> &#123; </div><div class="line">    <span class="attribute">clolor</span>: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 “.classname” 可以选择属于这个类的所有元素。如</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.greentea</span> &#123;</div><div class="line">    <span class="attribute">color</span>: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="属性和值"><a href="#属性和值" class="headerlink" title="属性和值"></a>属性和值</h3><ul>
<li>规则中的所有属性和值都放在{}大括号之间</li>
<li>每个属性声明以一个分号结束。</li>
<li><strong>继承</strong>：很多属性能够继承。例如，如果为<code>&lt;body&gt;</code>元素设置了一个可继承的属性，那么<code>&lt;body&gt;</code>的所有子元素都会继承这个属性。</li>
<li><strong>覆盖</strong>：通过为你想改变的元素创建一个更特定的规则，能覆盖该元素继承的属性。</li>
</ul>
<h4 id="常用CSS样式属性"><a href="#常用CSS样式属性" class="headerlink" title="常用CSS样式属性"></a>常用CSS样式属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>color</td>
<td>设置文本元素的字体颜色</td>
</tr>
<tr>
<td>background-color</td>
<td>设置元素的背景颜色</td>
</tr>
<tr>
<td>background-image</td>
<td>在元素后面放置一个图像</td>
</tr>
<tr>
<td>border</td>
<td>在元素周围加边框，可以是实现、凸起、虚线边框</td>
</tr>
<tr>
<td>top</td>
<td>控制元素顶部的位置</td>
</tr>
<tr>
<td>left</td>
<td>制定一个元素的左边所在位置</td>
</tr>
<tr>
<td>padding</td>
<td>设置一个元素边缘和它的内容之间的空间距离</td>
</tr>
<tr>
<td>font-family</td>
<td>设置元素的字体格式</td>
</tr>
<tr>
<td>font-weight</td>
<td>控制文本的粗细，可以用来设置粗体</td>
</tr>
<tr>
<td>font-size</td>
<td>让文本更大或更小</td>
</tr>
<tr>
<td>font-style</td>
<td>设置斜体文体</td>
</tr>
<tr>
<td>text-align</td>
<td>将文本左对齐、居中或右对齐</td>
</tr>
<tr>
<td>line-height</td>
<td>设置一个文本元素中的行间距</td>
</tr>
<tr>
<td>letter-spacing</td>
<td>在字母之间设置间距</td>
</tr>
<tr>
<td>list_style</td>
<td>改变列表中列表项的外观</td>
</tr>
</tbody>
</table>
<h3 id="CSS验证工具"><a href="#CSS验证工具" class="headerlink" title="CSS验证工具"></a>CSS验证工具</h3><p>可以使用<a href="http://jigsaw.w3.org/css-validator/" target="_blank" rel="external">W3C的CSS验证工具</a>验证CSS语法。</p>
<h2 id="在HTML中使用CSS"><a href="#在HTML中使用CSS" class="headerlink" title="在HTML中使用CSS"></a>在HTML中使用CSS</h2><ul>
<li><p>要在HTML中包含一个样式，最容易的办法就是使用<code>&lt;style&gt;</code>标记。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Head First Lounge<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="xml"></span></div><div class="line">            <span class="comment">&lt;!-- 样式内容在此 --&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        .</div><div class="line">        .</div><div class="line">        .</div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>对于HTML以及相当复杂的网站，可能要链接到一个外部样式表。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Head First Lounge<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"lounge.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        .</div><div class="line">        .</div><div class="line">        .</div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="增加字体和颜色样式"><a href="#增加字体和颜色样式" class="headerlink" title="增加字体和颜色样式"></a>增加字体和颜色样式</h1><h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><p>CSS提供了很多属性对字体的外观加以控制：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>font-family</td>
<td>定制页面中使用的字体</td>
</tr>
<tr>
<td>font-size</td>
<td>控制字体大小</td>
</tr>
<tr>
<td>color</td>
<td>设置文本颜色</td>
</tr>
<tr>
<td>font-weight</td>
<td>设置字体的粗细</td>
</tr>
<tr>
<td>text-decoration</td>
<td>为文本增加更多风格，如上划线、下划线和删除线等</td>
</tr>
</tbody>
</table>
<h3 id="字体系列-font-family"><a href="#字体系列-font-family" class="headerlink" title="字体系列 font-family"></a>字体系列 font-family</h3><h4 id="字体系列类型"><a href="#字体系列类型" class="headerlink" title="字体系列类型"></a>字体系列类型</h4><p>字体系列是一组有共同特征的字体，用于Web的字体系列有5个。</p>
<table>
<thead>
<tr>
<th>字体系列</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>sans-serif（无衬线体）</td>
<td>包括没有<em>衬线</em>的字体。与serif字体相比，通常认为sans-serif字体在计算机屏幕上更容易识读</td>
</tr>
<tr>
<td>serif（衬线体）</td>
<td>包括有衬线的字体，更多用于新闻报纸的文字排版</td>
</tr>
<tr>
<td>Monospace（等距）</td>
<td>字体包含固定宽度的字符</td>
</tr>
<tr>
<td>Cursive（手写体）</td>
<td>包括看似手写的字体，有时会看到标题中使用这些字体</td>
</tr>
<tr>
<td>Fantasy</td>
<td>包含有某种风格的装饰性字体</td>
</tr>
</tbody>
</table>
<p><em>衬线：字幕末端的装饰性“小细线”。</em></p>
<h4 id="在CSS中指定字体系列"><a href="#在CSS中指定字体系列" class="headerlink" title="在CSS中指定字体系列"></a>在CSS中指定字体系列</h4><ul>
<li>访问者在你的Web页面上看到的字体取决于他们自己的计算机上安装了哪些字体，除非你使用Web字体。</li>
<li>最好在font-family CSS属性中指定候选字体，以防用户没有安装你的首选字体，最后一个字体要指定为一个通用字体，如serif或sans-serif，这样如果找不到其他字体浏览器可以替换适当的字体。<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: Verdana, Geneva, Arial, sans-serif;</div><div class="line">    <span class="comment">/* 大多数PC上都有Verdana字体，另外大多数Mac上都有Geneva，Arial在PC和Mac上</span></div><div class="line">    都很常见，如果其他字体都找不到，就使用默认的sans-serif字体。 */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="增加Web字体"><a href="#增加Web字体" class="headerlink" title="增加Web字体"></a>增加Web字体</h4><p><strong>1.找到一个字体</strong>：访问一些提供字体的网站，如<a href="http://www.google.com/webfonts" target="_blank" rel="external">Google Web Fonts</a>、<a href="http://www.fonts.com/web-fonts" target="_blank" rel="external">Fonts.com</a> 和 <a href="http://www.extensis.com/" target="_blank" rel="external">Extensis</a>，此处使用Emblema One。</p>
<p><strong>2.确保有所需字体的所有格式</strong>，推荐使用Web开放字体格式，另外选择<br>TrueType作为候选，因为这种字体在所有浏览器上也得到了很好的支持（IE除外）。</p>
<table>
<thead>
<tr>
<th>字体格式</th>
<th style="text-align:center">文件扩展名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>TrueType字体</td>
<td style="text-align:center">.ttf</td>
<td></td>
</tr>
<tr>
<td>OpenType字体</td>
<td style="text-align:center">.otf</td>
<td>TrueType的更新版</td>
</tr>
<tr>
<td>Embedded OpenType字体</td>
<td style="text-align:center">.eot</td>
<td>OpenType的一种压缩形式，是Microsoft专用的，仅IE提供支持</td>
</tr>
<tr>
<td>SVG字体</td>
<td style="text-align:center">.svg</td>
<td>Svalable Vector Graphics是一种通用图像格式，SVG字体使用这种格式表示字符</td>
</tr>
<tr>
<td>Web开放字体格式</td>
<td style="text-align:center">.woff</td>
<td>建立在TrueType基础之上，已经发展为Web字体的一个标准。大多数现代浏览器都对这种格式提供了很好的支持</td>
</tr>
</tbody>
</table>
<p><strong>3.把你的字体文件放在Web上</strong>，得到字体文件的URL，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.woff</div><div class="line">http://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.ttf</div></pre></td></tr></table></figure></p>
<p>4.<strong>在CSS中增加@font-face属性</strong>，在CSS文件中的最上面增加一个@font-face规则：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 规则以 @font-face开头 */</span></div><div class="line">@<span class="keyword">font-face</span> &#123;</div><div class="line">    <span class="comment">/* @font-face规则会建立一个字体，并指定一个font-family名，以便以后使用 */</span></div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"Emblema One"</span>;</div><div class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"http://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.woff"</span>),</div><div class="line">         <span class="built_in">url</span>(<span class="string">"http://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.ttf"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>5.在CSS中使用 font-family 名</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-family</span>: <span class="string">"Emblema One"</span>, sans-serif; &#125;</div></pre></td></tr></table></figure></p>
<h3 id="字体大小-font-size"><a href="#字体大小-font-size" class="headerlink" title="字体大小 font-size"></a>字体大小 font-size</h3><h4 id="字体大小调整方法"><a href="#字体大小调整方法" class="headerlink" title="字体大小调整方法"></a>字体大小调整方法</h4><h5 id="px像素"><a href="#px像素" class="headerlink" title="px像素"></a>px像素</h5><p>用像素指定字体大小，就是告诉浏览器字母高度（字母的最低部分与最高部分之间）是多少像素。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="comment">/* 先指定一个数，后面是 “px”，之间不能有空格 */</span></div><div class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="百分数"><a href="#百分数" class="headerlink" title="百分数"></a>百分数</h5><p>用百分数指定字体大小时，会相对于另一个字体大小指出这个字体有多大（<strong>一般而言就是相对于父元素的字体大小</strong>）。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">150%</span>;    <span class="comment">/* 此处大小即为21px */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="em"><a href="#em" class="headerlink" title="em"></a>em</h5><p>em 类似于百分数，也是一个相对度量单位，不过是指定一个比例因子。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">150%</span>;    </div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h2</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">1.2em</span>  <span class="comment">/* 此处大小因大多数浏览器四舍五入为17px */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h5><p>可以把一个字体大小指定为 xx-small, x-small, small, medium, large, x-large 或 xx-large，浏览器会使用自己定义的默认值来把这些关键字转换为像素值。<br><br>各个关键字对应的大小通常有以下关系（但不同浏览器中关键字的定义并不一定相同）：</p>
<ul>
<li>每个大小大约比前一个大小大20%</li>
<li>small通常定义为大约12像素。</li>
</ul>
<h4 id="在CSS中指定字体大小"><a href="#在CSS中指定字体大小" class="headerlink" title="在CSS中指定字体大小"></a>在CSS中指定字体大小</h4><ol>
<li>选择一个关键字（<strong>推荐 small 或 medium</strong> ），指定它作为 body 规则中的字体大小（这相当于页面的默认字体大小）。</li>
<li>使用 em 或百分数，相对于body字体大小指定其他元素地字体大小。</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: small; &#125;</div><div class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-size</span>: <span class="number">150%</span>; &#125;</div><div class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">font-size</span>: <span class="number">120%</span>; &#125;</div></pre></td></tr></table></figure>
<ul>
<li>只要改变 body 字体大小，就可以相应地按比例调整Web页面的所有字体大小，方便用户自定义调整。</li>
<li>如果直接适用像素指定字体大小，老版本的 Internet Explorer 将不支持文本缩放，而且不利于维护。</li>
</ul>
<h3 id="字体粗细-font-weight"><a href="#字体粗细-font-weight" class="headerlink" title="字体粗细 font-weight"></a>字体粗细 font-weight</h3><ul>
<li><p>将元素的 font-weight 属性设置为 bold，来使用粗体文本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font-weight: bold;</div></pre></td></tr></table></figure>
</li>
<li><p>如果一个元素默认地设置为bold，或者从父元素继承了粗体，可以如下去掉粗体样式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font-weight: normal;</div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>bolder</code>和<code>lighter</code>两个相对 font-weight 属性会相对于所继承的值使文本样式稍粗一些或者稍细一些。但由于没有多少字体支持粗细程度的微小差别，实际上这两个值通常没有任何效果，所以这些值很少使用。</p>
</li>
<li>还可以把 font-weight 属性设置为 100 到 900 之间的一个数（100的倍数），不过这个特性也未得到字体和浏览器的广泛支持，所以通常并不使用。</li>
</ul>
<h3 id="字体风格-font-style"><a href="#字体风格-font-style" class="headerlink" title="字体风格 font-style"></a>字体风格 font-style</h3><ul>
<li><p>将 font-syle 属性设置为<code>italic</code>或者<code>oblique</code>会使字体看起来是倾斜的。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-style</span>: <span class="selector-tag">italic</span>;  <span class="comment">/* 斜体 */</span></div><div class="line"><span class="selector-tag">font-style</span>: <span class="selector-tag">oblique</span>; <span class="comment">/* 倾斜字体 */</span></div></pre></td></tr></table></figure>
</li>
<li><p>由于无法控制用户使用的字体和浏览器，实际上指定斜体或倾斜文本最终表现风格并没有明显的差别，<strong>所以不必严格区别，完全就用斜体</strong>。</p>
</li>
</ul>
<h3 id="文本装饰-text-decoration"><a href="#文本装饰-text-decoration" class="headerlink" title="文本装饰 text-decoration"></a>文本装饰 text-decoration</h3><p>文本装饰允许你为文本增加一些装饰性的效果，如下划线、上划线和删除线。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">em</span> &#123;</div><div class="line">    <span class="attribute">text-decoration</span>: line-through;  <span class="comment">/* 添加一个从文本中间穿过的横线 */</span></div><div class="line">    <span class="attribute">text-decoration</span>: underline;  <span class="comment">/* 添加下划线 */</span></div><div class="line">    <span class="attribute">text-decoration</span>: overline;  <span class="comment">/* 添加上划线 */</span></div><div class="line">    <span class="attribute">text-decoration</span>: none;  <span class="comment">/* 如果文本继承了不想要的文本装饰，使用“none”值来去除装饰 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果要对 text-decoration 指定多个值，需要将这几个值合并到一个 text-decoration声明中，因为不同规则中的装饰不会累加在一起：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">em</span> &#123;</div><div class="line">    <span class="attribute">text-decoration</span>: underline overline;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实际上，并不推荐使用 text-decoration 添加下划线，因为会被用户误认为是链接文本。作为替代，可使用 <code>border-bottom</code>属性给整个段落添加下划线。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#cc6600</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: thin dotted <span class="number">#888888</span>;</div><div class="line">    <span class="comment">/* text-decoration : underline; */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="颜色样式"><a href="#颜色样式" class="headerlink" title="颜色样式"></a>颜色样式</h2><h3 id="Web颜色如何工作"><a href="#Web颜色如何工作" class="headerlink" title="Web颜色如何工作"></a>Web颜色如何工作</h3><ul>
<li>Web颜色是混合不同数量的红、绿、蓝色得到的</li>
<li>如果混合红色100%，绿色100%，蓝色100%，可以得到白色；</li>
<li>如果混合红色60%，绿色60%，蓝色60%，可以得到灰色；</li>
<li>如果混合红色80%，绿色40%，蓝色0%，可以得到橙色；</li>
<li>如果混合红色0%，绿色0%和蓝色0%，可以得到黑色。</li>
</ul>
<h3 id="指定Web颜色方法"><a href="#指定Web颜色方法" class="headerlink" title="指定Web颜色方法"></a>指定Web颜色方法</h3><h4 id="按名指定颜色"><a href="#按名指定颜色" class="headerlink" title="按名指定颜色"></a>按名指定颜色</h4><p>要在CSS中描述颜色，最直接的方法就是使用颜色名：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: silver;  <span class="comment">/* 不区分大小写 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有16种基本颜色和150种扩展颜色可以采用这种方法指定，这些颜色名只是预定义了红、绿、蓝三种颜色分量的多少。<br><br>16种基本颜色分别是：Aqua、black、Blue、Fuchsia、Gray、Green、<br>Lime、Maroon、Navy、Olive、Purple、Red、Silver、Teal、White、Yellow。<br>所有浏览器中肯定都有这16种颜色，不过可能只在较新的浏览器中能找到150种扩展颜色。</p>
<h4 id="用红绿蓝值指定颜色"><a href="#用红绿蓝值指定颜色" class="headerlink" title="用红绿蓝值指定颜色"></a>用红绿蓝值指定颜色</h4><p>可以按红、绿、蓝分量的多少来指定一个颜色。以上文的橙色为例，可以如下表示：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(80%, 40%, 0%); </div><div class="line">    <span class="comment">/* 以 “rgb” 开头，这是 red,green,blue 的缩写，后面依次指定其百分比 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还可以将红、绿、蓝值指定为0到255之间的一个数值，如下表示：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(204, 102, 0);</div><div class="line">    <span class="comment">/* 数值为255与相应百分数的乘积 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="使用十六机制码指定颜色"><a href="#使用十六机制码指定颜色" class="headerlink" title="使用十六机制码指定颜色"></a>使用十六机制码指定颜色</h4><p>将表示颜色分量的红绿蓝值依次转换成十六进制码就是相应的十六进制码颜色表示方法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#cc6600</span></div><div class="line">    <span class="comment">/* 十六进制的cc对应十进制的204,66对应102,0对应0 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>如果每一组分量中两位数字都相同，可以使用简写，如 #cc6600 可以缩写为 #cb0。</strong></p>
<h3 id="找到Web颜色"><a href="#找到Web颜色" class="headerlink" title="找到Web颜色"></a>找到Web颜色</h3><ul>
<li>图像编辑应用的选色器</li>
<li>使用在线颜色表，例如 <a href="h=ttps://en.wikipedia.org/wiki/Web_colors">Wikipedia的颜色表</a>。</li>
</ul>
<h1 id="盒模型-box-model"><a href="#盒模型-box-model" class="headerlink" title="盒模型 box model"></a>盒模型 box model</h1><h2 id="盒模型的基本概念"><a href="#盒模型的基本概念" class="headerlink" title="盒模型的基本概念"></a>盒模型的基本概念</h2><p>CSS使用一个盒模型来控制元素如何显示。所有元素都当做盒子：段落、标题、块引用、列表、列表项等，甚至内联元素（如<code>&lt;em&gt;</code>和链接）。盒子由内容区和可选的内边距、边框和外边距组成。</p>
<table>
<thead>
<tr>
<th>区域</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>内容区 content area</td>
<td>内容区包含元素的内容（例如文本或图像），它的大小通常正好能包含全部内容。内容区被内边距包围。</td>
</tr>
<tr>
<td>内边距 padding</td>
<td>内边距是可选的，通过使用内边距，可以在内容与盒子边框之间创建一些看得到的额外空间。作为元素的一部分，元素的背景颜色（或背景图像）会延伸到内边距下面。内边距是透明的，没有颜色，也没有自己的装饰。 </td>
</tr>
<tr>
<td>边框 border</td>
<td>元素周围可以添加一个可选的边框，这个边框会包围内边距，提供了从视觉上分离内容的一种手段。边框可以有各种不同的宽度、颜色和样式。</td>
</tr>
<tr>
<td>外边距 margin</td>
<td>外边距也是可选的，它允许在元素和其他元素之间增加空间。类似于内边距，外边距也是透明的，本身没有颜色或装饰。</td>
</tr>
</tbody>
</table>
<h2 id="盒模型的一般设置"><a href="#盒模型的一般设置" class="headerlink" title="盒模型的一般设置"></a>盒模型的一般设置</h2><h3 id="边距"><a href="#边距" class="headerlink" title="边距"></a>边距</h3><h4 id="行间距-line-height"><a href="#行间距-line-height" class="headerlink" title="行间距 line-height"></a>行间距 line-height</h4><p>使用 <code>line-height</code> 属性可以设置文本行之间的间距,<code>line-height</code>属性可以继承，行间距的指定方式有以下5种：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
<th>继承问题</th>
</tr>
</thead>
<tbody>
<tr>
<td>normal</td>
<td>默认。设置合理的行间距，一般为1.2</td>
<td>子元素根据自身字体大小乘以固定倍数（由浏览器给出，一般为1.2）计算行间距，不继承父元素属性，元素随着自身字体大小做相应的缩放</td>
</tr>
<tr>
<td>number</td>
<td>设置数字，此数字会与当前的字体尺寸相乘来设置行间距</td>
<td>与normal类似，不过倍数可自定义</td>
</tr>
<tr>
<td>length</td>
<td>使用像素数设置固定的行间距</td>
<td>继承指定的固定行间距</td>
</tr>
<tr>
<td>%</td>
<td>基于当前字体尺寸的百分比行间距</td>
<td>与设置数字不同，此处继承父元素的行间距绝对值，而非比例</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承行间距的值</td>
</tr>
</tbody>
</table>
<h4 id="内边距和外边距"><a href="#内边距和外边距" class="headerlink" title="内边距和外边距"></a>内边距和外边距</h4><ul>
<li>内边距和外边距大小可以用像素或百分数设置。</li>
<li>对于外边距、内边距或边框，CSS提供了相应的属性，可以一次对所有四个边完成设置，也可以单独设置任意一边（<strong>但后设置的会覆盖先设置的值，因此如需对某一边进行单独设置，请将其规则放置在通用规则后面</strong>）。</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.guarantee</span> &#123;</div><div class="line">    <span class="attribute">padding</span>:      <span class="number">25px</span>;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">80px</span>;  <span class="comment">/* 注意设置顺序，先通用，再特例 */</span></div><div class="line">    <span class="attribute">margin</span>:       <span class="number">30px</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">250px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><h4 id="边框样式-border-style"><a href="#边框样式-border-style" class="headerlink" title="边框样式 border-style"></a>边框样式 border-style</h4><p>border-style 属性可以控制边框的视觉样式，共有8种不同的边框样式，包括实线(solid)、破折线(dashed)、虚线(dotted)、双线(double)、槽线(groove)、内凹(inset)、外凸(outset)和脊线(ridge)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">border-style: groove;</div></pre></td></tr></table></figure></p>
<h4 id="边框宽度-border-width"><a href="#边框宽度-border-width" class="headerlink" title="边框宽度 border-width"></a>边框宽度 border-width</h4><p>边框宽度可以用像素设置，也可以使用关键字 <code>thin</code>、<code>medium</code>和<code>thick</code>来指定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">border-width: thin;</div><div class="line">border-width: 5px;</div></pre></td></tr></table></figure></p>
<h4 id="边框颜色-border-color"><a href="#边框颜色-border-color" class="headerlink" title="边框颜色 border-color"></a>边框颜色 border-color</h4><p>边框颜色设置与设置字体颜色类似，可以使用颜色名，rgb值或十六进制码来指定颜色。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">border-color: red;</div><div class="line">border-color: rgb(100%, 0%, 0%);</div><div class="line">border-color: #ff0000;</div></pre></td></tr></table></figure></p>
<h4 id="边框圆角-border-radius"><a href="#边框圆角-border-radius" class="headerlink" title="边框圆角 border-radius"></a>边框圆角 border-radius</h4><p>使用 border-radius 属性可以对有边框的元素创建圆角。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">border-radius: 15px;</div><div class="line">border-radius: 3em;  /* 如果使用em，边框半径的度量相对于元素的字体大小。 */</div></pre></td></tr></table></figure></p>
<h4 id="特定某一边的边框特性化"><a href="#特定某一边的边框特性化" class="headerlink" title="特定某一边的边框特性化"></a>特定某一边的边框特性化</h4><p>就像外边距和内边距一样，边框还可以指定任意一边的边框样式、宽度、颜色或圆角。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">border-top-color: black;</div><div class="line">border-top-style: dashed;</div><div class="line">border-top-width: thick;</div><div class="line">border-top-left-radius: 15px;</div></pre></td></tr></table></figure></p>
<h3 id="背景图像-background-image"><a href="#背景图像-background-image" class="headerlink" title="背景图像 background-image"></a>背景图像 background-image</h3><h4 id="background-image-和-lt-img-gt"><a href="#background-image-和-lt-img-gt" class="headerlink" title="background-image 和 &lt;img&gt;"></a>background-image 和 <code>&lt;img&gt;</code></h4><p>backgound-image 属性用途非常特定，只是设置一个元素的背景图像，属于表现方面的一个装饰，在页面中没有任何具体的意义。<br><br>而<code>&lt;img&gt;</code>元素用来包含一个图像，它在页面中可能有更为重要的作用，如照片或 logo。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background-image: url(images/background.gif);</div></pre></td></tr></table></figure></p>
<p><strong>注意 URL两边不需要加引号。</strong></p>
<h4 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h4><p>background-position 属性会设置图像的位置，可以按像素指定，也可以指定为一个百分数，或者使用关键字指定，如 top、left、right、bottom 和 center。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">top</span> <span class="selector-tag">left</span>;  <span class="comment">/* 将这个图像放在元素的左上角 */</span></div></pre></td></tr></table></figure></p>
<h4 id="background-repeat"><a href="#background-repeat" class="headerlink" title="background-repeat"></a>background-repeat</h4><p>background-repeat 属性会设置背景图像的平铺行为，默认地背景图像会在水平和垂直方向上重复。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">repeat</span>;  <span class="comment">/* 默认行为 */</span></div><div class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">no-repeat</span>; <span class="comment">/* 图像显示一次，不重复 */</span></div><div class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">repeat-x</span>; <span class="comment">/* 图像只在水平方向上重复 */</span></div><div class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">repeat-y</span>; <span class="comment">/* 图像只在垂直方向上重复 */</span></div><div class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">inherit</span>; <span class="comment">/* 按照父元素的设置来处理 */</span></div></pre></td></tr></table></figure></p>
<h3 id="类和-id"><a href="#类和-id" class="headerlink" title="类和 id"></a>类和 id</h3><ul>
<li>对于希望成组指定样式的元素要使用 class 属性。</li>
<li>使用id属性为元素指定一个唯一的名字。还可以使用id属性为元素提供唯一的样式。</li>
<li>一个元素只能有一个id，不过它可以属性多个类。</li>
</ul>
<h2 id="混合样式表"><a href="#混合样式表" class="headerlink" title="混合样式表"></a>混合样式表</h2><ul>
<li>在HTML中可以使用多个样式表。如果两个样式表包含冲突的属性定义，HTML文件中最后链接的样式表最为优先。</li>
<li>使用多个样式表，一方面可以在继承CSS样式的同时覆盖和修改特定的样式，另一方面也可以针对现实页面的不同设备类型来调整页面的样式，以提供最优的表现形式。</li>
</ul>
<h3 id="设备指定"><a href="#设备指定" class="headerlink" title="设备指定"></a>设备指定</h3><h4 id="lt-link-gt-元素添加媒体查询"><a href="#lt-link-gt-元素添加媒体查询" class="headerlink" title="&lt;link&gt;元素添加媒体查询"></a><code>&lt;link&gt;</code>元素添加媒体查询</h4><p>media 属性允许在应用样式表时指定设备类型，通过创建一个“媒体查询”来指定设备类型，媒体查询要与设备匹配。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 下面查询指定了有屏幕且屏幕宽度不超过480像素的设备类型 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"lounge-mobile.css"</span> <span class="attr">media</span>=<span class="string">"screen and (max-device-windth: 480px)"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 指定设备类型为打印机 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"lounge-print.css"</span> <span class="attr">media</span>=<span class="string">"print"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>查询中有很多属性可以使用，如屏幕宽度<code>min-device-width</code>、<code>max-device-width</code>、以及显示方向<code>orientation</code>（这可以是横向（<code>landscape</code>）或纵向（<code>protrait</code>）。可以根据需要为HTML增加多个<code>&lt;link&gt;</code>标记，涵盖所要支持的所有设备。</p>
<h4 id="CSS的-media-规则指定"><a href="#CSS的-media-规则指定" class="headerlink" title="CSS的 @media 规则指定"></a>CSS的 @media 规则指定</h4><p>要为CSS指定有特定属性的设备，还可以直接写在CSS中。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen and (min-device-width: <span class="number">481px</span>) &#123;</div><div class="line">   <span class="selector-id">#guarantee</span> &#123;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">250px</span>;</div><div class="line">   &#125; </div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> print &#123;</div><div class="line">    <span class="selector-tag">body</span> &#123;</div><div class="line">        <span class="attribute">font-family</span>: Times, <span class="string">"times New Roman"</span>, serif;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>需要注意的是，</strong>如果使用CSS的 @media 规则，要把所有规则都放在一个文件中，再用 @media 规则将其分开，这样 CSS会变得非常庞大。</p>
<h1 id="div-与-span、"><a href="#div-与-span、" class="headerlink" title="div 与 span、"></a>div 与 span、</h1><h2 id="lt-div-gt-元素"><a href="#lt-div-gt-元素" class="headerlink" title="&lt;div&gt;元素"></a><code>&lt;div&gt;</code>元素</h2><ul>
<li>逻辑区 (logical section) 就是页面上彼此相关的一组元素，找出逻辑区有助于标识主内容区以及页面的页眉和页脚。</li>
<li><code>&lt;div&gt;</code>元素用于将相关的元素归组在一起，放在逻辑区中。可以使用<code>&lt;div&gt;</code>元素将需要共同样式的元素归组在一起。</li>
<li>使用嵌套<code>&lt;div&gt;</code>元素为文件增加更多结构，这有利于保证结构清晰或者方便增加样式。<strong>不过除非确实需要，否则不要过多地增加结构。</strong></li>
<li>一旦用<code>&lt;div&gt;</code>元素将内容区归组在一起，类似于其他块元素，可以对这些<code>&lt;div&gt;</code>增加样式。例如，对于包含在<code>&lt;div&gt;</code>中的一组元素，可以使用嵌入这些元素的<code>&lt;div&gt;</code>的边框属性，对这组元素增加一个边框。</li>
</ul>
<h2 id="元素宽度和对齐方式"><a href="#元素宽度和对齐方式" class="headerlink" title="元素宽度和对齐方式"></a>元素宽度和对齐方式</h2><h3 id="元素宽度-width"><a href="#元素宽度-width" class="headerlink" title="元素宽度 width"></a>元素宽度 width</h3><ul>
<li>width 属性设置一个<strong>元素内容区</strong>的宽度，可以通过像素数指定具体大小，也可以指定一个百分数。如果使用百分数，那么宽度会计算为元素所在容器宽度的一个百分比（容器可以是<code>&lt;body&gt;</code>、<code>&lt;div&gt;</code>等）。</li>
<li>一个块元素的默认宽度是 “auto”，这说明它会延伸占满浏览器的整个宽度。</li>
<li>一个元素的总宽度是内容区宽度，加上所增加的内边距、边框和外边距的宽度。</li>
<li>一般而言，一个元素的高度是默认的，也就是 auto，浏览器会在垂直方向上延伸内容区，使所有内容都可见。<strong>一般地，不用指定元素的高度。</strong></li>
</ul>
<h3 id="元素内容对齐-text-align"><a href="#元素内容对齐-text-align" class="headerlink" title="元素内容对齐 text-align"></a>元素内容对齐 text-align</h3><ul>
<li>text-align 是块元素的一个属性，用来将这个块元素中的所有内容对齐(<strong>包括内联元素和嵌套块元素</strong>)。</li>
<li>这个属性可以由块元素中的所有嵌套的块元素继承。</li>
<li>内联元素（如<code>&lt;img&gt;</code>）上无法直接使用 text-align 属性。</li>
</ul>
<h2 id="子孙选择器"><a href="#子孙选择器" class="headerlink" title="子孙选择器"></a>子孙选择器</h2><p>可以使用子孙选择器来选择嵌套在其他元素中的元素。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">div h2 &#123; ... &#125;  /* 选择嵌套在&lt;div&gt;元素中的所有&lt;h2&gt;(包括子元素、孙子元素等) */</div><div class="line">#elexirs h2 &#123; ... &#125;  /* 选择id为elixirs元素中的所有&lt;h2&gt; */</div><div class="line">#elexirs&gt;h2 &#123; ... &#125; /* 选择id为elixirs的元素中的直接子元素&lt;h2&gt; */</div><div class="line">h2#elexirs &#123; ... &#125; /* 选择id为elixirs的&lt;h2&gt;元素,注意与以上选择器作区分 */</div></pre></td></tr></table></figure></p>
<h2 id="属性的快捷形式"><a href="#属性的快捷形式" class="headerlink" title="属性的快捷形式"></a>属性的快捷形式</h2><h3 id="内外边距的快捷形式"><a href="#内外边距的快捷形式" class="headerlink" title="内外边距的快捷形式"></a>内外边距的快捷形式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">padding</span>: 0<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 30<span class="selector-tag">px</span> 10<span class="selector-tag">px</span>;  <span class="comment">/* 依次为上、右、下、左的内边距（顺时针方向） */</span></div><div class="line"><span class="selector-tag">margin</span>:  0<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 30<span class="selector-tag">px</span> 10<span class="selector-tag">px</span>;  <span class="comment">/* 与内边距相同的顺时针的规定顺序 */</span></div><div class="line"><span class="selector-tag">padding</span>: 20<span class="selector-tag">px</span>;                 <span class="comment">/* 所有内边距都为20px */</span></div><div class="line"><span class="selector-tag">margin</span>:  0<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;            <span class="comment">/* 依次指定了上下边距、左右边距 */</span></div></pre></td></tr></table></figure>
<h3 id="边框和背景的快捷形式"><a href="#边框和背景的快捷形式" class="headerlink" title="边框和背景的快捷形式"></a>边框和背景的快捷形式</h3><p>边框和被背景的快捷形式没有顺序要求，更加灵活：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">border: solid thin #007e7e;</div><div class="line">border: #007e7e solid thin;</div><div class="line">background: white url(images/cocktail.gif) repeat-x;</div></pre></td></tr></table></figure></p>
<h3 id="字体属性的快捷形式"><a href="#字体属性的快捷形式" class="headerlink" title="字体属性的快捷形式"></a>字体属性的快捷形式</h3><p>字体属性的快捷形式如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font: font-style font-variant font-weight font-size/line-height font-family;</div></pre></td></tr></table></figure></p>
<p>其中 font-style、font-variant、font-weight、line-height 四个属性是可选的，但必须指定 font-size 和 font-family（必须指定一个字体），如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font: small/1.6em Verdana, Helvetica, Arial, sans-serif;</div></pre></td></tr></table></figure></p>
<h2 id="lt-span-gt"><a href="#lt-span-gt" class="headerlink" title="&lt;span&gt;"></a><code>&lt;span&gt;</code></h2><ul>
<li><code>&lt;span&gt;</code>内联元素与<code>&lt;div&gt;</code>元素类似，它用于将相关的内联元素和文本归组在一起。</li>
<li>类似于<code>&lt;div&gt;</code>，可以将<code>&lt;span&gt;</code>元素增加到类（或者指定唯一的id），对它们增加自定义的样式。 </li>
</ul>
<h2 id="lt-a-gt-元素和伪类-Pseudo-class"><a href="#lt-a-gt-元素和伪类-Pseudo-class" class="headerlink" title="&lt;a&gt;元素和伪类 Pseudo-class"></a><code>&lt;a&gt;</code>元素和伪类 Pseudo-class</h2><ul>
<li><code>&lt;a&gt;</code>元素具有多种状态：未访问（link）、已访问（visited）、悬停（hover）、聚焦（focus）和活动（active）等，根据状态的不同，需要指定不同的样式。</li>
<li><p>伪类是内置的类，通过伪类可以单独的为<code>&lt;a&gt;</code>各个状态指定样式。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</div><div class="line">    <span class="attribute">color</span>: green;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">color</span>: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>伪类<code>first-child</code>对应元素的第一个子元素，如<code>&lt;blockquote&gt;</code>中的第一个段落，用<code>last-child</code>伪类选择<code>&lt;blockquote&gt;</code>的最后一个段落。</p>
</li>
</ul>
<h2 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h2><p>在多个样式表中，对同一个元素的样式规定，如何选择基本遵循以下两个原则：</p>
<ol>
<li>从规定者来看，按作者、读者和浏览器的优先顺序排列； </li>
<li>从CSS选择器来看，按id、类或伪类、元素名的优先顺序排列。</li>
</ol>
<h1 id="布局与定位"><a href="#布局与定位" class="headerlink" title="布局与定位"></a>布局与定位</h1><h2 id="流体布局-liquid-layouts"><a href="#流体布局-liquid-layouts" class="headerlink" title="流体布局 liquid layouts"></a>流体布局 liquid layouts</h2><p>浏览器使用流在页面中放置元素。块元素从上向下流，各元素之间有一个换行。默认的，每个块元素会占浏览器窗口的整个宽度。内联元素在块元素内部从左上方流向左下方。如果需要多行，浏览器会换行，在垂直方向上扩展外围块元素，来包含这些内联元素。</p>
<p>正常页面流中两个块元素上下相邻的外边距会折叠为最大外边距的大小，或者如果两个外边距大小相同的，则会折叠为一个外边距（块元素左右相邻不折叠）。</p>
<h2 id="布局方式"><a href="#布局方式" class="headerlink" title="布局方式"></a>布局方式</h2><p>流体布局是指，扩展浏览器窗口时，页面中的内容会扩展以适应页面。除此之外，还有冻结布局和凝胶布局。</p>
<h3 id="浮动布局-float-layouts"><a href="#浮动布局-float-layouts" class="headerlink" title="浮动布局 float layouts"></a>浮动布局 float layouts</h3><p>浮动元素会从正常流中取出，浮动到左边或右边。元素通过 <strong>float 属性</strong>来实现浮动，其值可以设置为 right 或 left。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#amazing</span> &#123;         <span class="comment">/* 指定标识 */</span></div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;  <span class="comment">/* 指定宽度，浮动元素必须有特定的宽度，不能设置为auto。 */</span></div><div class="line">    <span class="attribute">float</span>: right;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>浮动元素放在块元素之上，不会影响正常的页面流。不过，内联内容会考虑浮动元素的边界，围绕着这个浮动元素。<em>它非常适合在一个文本段落中浮动图像，让文本围绕着这个图像。</em></p>
<p><strong>clear属性</strong>用来指定一个块元素左边或右边（或者左右两边）不能有浮动元素。设置了clear属性的块属性会下移，知道它旁边没有块元素。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#footer &#123;</div><div class="line">    ...</div><div class="line">    clear: right  /* 指定该元素右边不允许有浮动内容 */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="冻结布局-frozen-layouts"><a href="#冻结布局-frozen-layouts" class="headerlink" title="冻结布局 frozen layouts"></a>冻结布局 frozen layouts</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>冻结布局是指，其中内容的宽度是固定的，不会随着浏览器窗口扩展或收缩。这有一个好处，可以对设计提供更多控制，不过也要付出代价，这样就不能有效地使用浏览器宽度了。</p>
<h4 id="冻结方式"><a href="#冻结方式" class="headerlink" title="冻结方式"></a>冻结方式</h4><h5 id="HTML修改"><a href="#HTML修改" class="headerlink" title="HTML修改"></a>HTML修改</h5><p>增加一个新的<code>&lt;div&gt;</code>元素包围页面中的所有内容（<code>&lt;body&gt;</code>元素中的内容）,指定id（例如“allcontent”）。</p>
<h5 id="CSS修改"><a href="#CSS修改" class="headerlink" title="CSS修改"></a>CSS修改</h5><p>限定“allcontent” <code>&lt;div&gt;</code>中所有元素的内容大小，使之有一个固定的宽度。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#allcontent</span> &#123;</div><div class="line">    <span class="attribute">width</span>:            <span class="number">800px</span>;</div><div class="line">    <span class="attribute">padding-top</span>:      <span class="number">5px</span>;</div><div class="line">    <span class="attribute">padding-bottom</span>:   <span class="number">5px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#675c47</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="凝胶布局-jollo-layouts"><a href="#凝胶布局-jollo-layouts" class="headerlink" title="凝胶布局 jollo layouts"></a>凝胶布局 jollo layouts</h3><p>凝胶布局是指，其中内容宽度是固定的，但是外边距会随着浏览器窗口扩展或收缩。凝胶布局通常会把内容放在中央。这与冻结布局有同样的好处，不过通常更美观。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#allcontent</span> &#123;</div><div class="line">    <span class="attribute">width</span>:            <span class="number">800px</span>;</div><div class="line">    <span class="attribute">padding-top</span>:      <span class="number">5px</span>;</div><div class="line">    <span class="attribute">padding-bottom</span>:   <span class="number">5px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#675c47</span></div><div class="line">    margin-left:      auto;</div><div class="line">    <span class="attribute">margin-right</span>:     auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>position 属性可以设置为4个值： static（静态）、absolute（绝对）、fixed（固定）和relative（相对）。<br>使用绝对、固定和相对定位时，属性top、right、bottom和left可以用来指定元素的位置。</p>
<h3 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h3><p>静态定位是默认方式，将元素放在页面的正常流中。</p>
<h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>绝对定位允许将元素放在页面上的任何位置。默认地，绝对定位元素会相对于页面边界来放置。如果一个绝对定位元素嵌套在另一个定位元素中，这个元素就会相对于外包含元素（即其父元素）定位。</p>
<p>绝对定位元素可以使用z-index属性分层放置，使一个元素在另一个元素上面。z-index值越大，说明它层次越高（在屏幕上离你越近）。</p>
<h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p>固定定位元素总是相对于浏览器窗口定位，页面滚动时，固定定位的元素不会移动。页面中的其他内容会在这些固定定位元素下面正常滚动。</p>
<h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>相对定位元素首先正常流入页面，然后按指定的量偏移，从而流出它们原先所在的空间。</p>
<p>使用相对定位时，left、right、top和bottom是指距正常流中该元素位置的偏移量。</p>
<h2 id="表格显示"><a href="#表格显示" class="headerlink" title="表格显示"></a>表格显示</h2><p>CSS表格显示允许按一种表格布局来摆放元素。</p>
<h3 id="如何使用表格显示"><a href="#如何使用表格显示" class="headerlink" title="如何使用表格显示"></a>如何使用表格显示</h3><h4 id="增加HTML结构"><a href="#增加HTML结构" class="headerlink" title="增加HTML结构"></a>增加HTML结构</h4><p>要创建表格显示，需要使用对应表格的一个块元素，对应行的块元素，以及对应单元格的块元素。通常，这些块元素都是<code>&lt;div&gt;</code>元素（<strong>如要使用图像等内联元素，需要将其包装在一个<code>&lt;div&gt;</code>元素中使用</strong>）。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tableContainer"</span>&gt;</span>   <span class="comment">&lt;!-- 为整个表格指定块元素 --&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"talbeRow"</span>&gt;</span>     <span class="comment">&lt;!-- 为 "main"和"sidebar"对应行指定块元素 --&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span>     <span class="comment">&lt;!-- 为 "main" 指定块元素 --&gt;</span> </div><div class="line">            ...</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sidebar"</span>&gt;</span>   <span class="comment">&lt;!-- 为 "sidebar" 指定块元素 --&gt;</span> </div><div class="line">            ...</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="使用CSS创建表格显示"><a href="#使用CSS创建表格显示" class="headerlink" title="使用CSS创建表格显示"></a>使用CSS创建表格显示</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#tableContainer</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table;   <span class="comment">/* 创建整个表格结构 */</span></div><div class="line">    <span class="attribute">border-spacing</span>: <span class="number">10px</span>;  <span class="comment">/* 为表格中的单元格指定10像素的边框间距，类似于常规元素的外边距 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#tableRow</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-row;  <span class="comment">/* 指定该元素以表格行的形式显示 */</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/* 以下设置表格中单元格的显示格式 */</span></div><div class="line"><span class="selector-id">#main</span> &#123;</div><div class="line">    <span class="attribute">display</span>: talbe-cell;  <span class="comment">/* 以表格单元格的形式显示 */</span></div><div class="line">    <span class="attribute">font-size</span>: <span class="number">105%</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#efe5d0</span> <span class="built_in">url</span>(images/background.gif) top left;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</div><div class="line">    <span class="comment">/* margin: 0px 10px 10px 10px  由于表格属性中已经规定 border-spacing，此处无需再规定外边距*/</span></div><div class="line">    <span class="attribute">vertical-align</span>: top;  <span class="comment">/* vertical-align 属性使得单元格的所有内容相对于单元格上边对齐 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#sidebar</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">105%</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#efe5d0</span> <span class="built_in">url</span>(images/background.gif) bottm right;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</div><div class="line">    <span class="comment">/* margin: 0px 10px 10px 10px */</span></div><div class="line">    <span class="attribute">vertical-align</span>: top;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>vertical-align属性</strong>：垂直对齐可以设置为 top（顶端对齐）、middle（中间对齐）、或bottom（底端对齐）,浏览器默认的对齐方式为 middle。<br><strong>列的宽度</strong>：可以用 width 属性控制表格列的宽度，通过使用百分数，可以使表格随着浏览器窗口大小的调整扩展和收缩。</p>
<h2 id="双栏布局方案的选择"><a href="#双栏布局方案的选择" class="headerlink" title="双栏布局方案的选择"></a>双栏布局方案的选择</h2><h3 id="浮动布局的特点"><a href="#浮动布局的特点" class="headerlink" title="浮动布局的特点"></a>浮动布局的特点</h3><p>使用 float 使边栏浮在页面主内容上，并使用clear确保这个浮动边栏不会与页脚重叠。但存在一些局限：</p>
<ul>
<li>如果希望浮动元素在某个元素后面，就要让它紧挨着放在哪个元素下面。这样，如果要在页面主内容上浮动某元素，则它需要移动到页眉下，主内容上面，这种顺序并不能反映页面中内容的相对重要性。</li>
<li>使用 float时，无法创建两个高度相同的列。</li>
</ul>
<h3 id="凝胶布局的特点"><a href="#凝胶布局的特点" class="headerlink" title="凝胶布局的特点"></a>凝胶布局的特点</h3><p>凝胶布局中，由一个固定大小的<code>&lt;div&gt;</code>包围页面中的所有内容，然后利用auto属性允许外边距扩展,从而提供了一个适当居中，固定大小的页面。这要就解决了内容顺序的问题，但其缺点在于，内容不会扩展来填满整个浏览器窗口（<em>虽然很多人可能根本不认为这是一个缺点</em>）。</p>
<h3 id="绝对布局的特点"><a href="#绝对布局的特点" class="headerlink" title="绝对布局的特点"></a>绝对布局的特点</h3><p>使用绝对定位能保证内容的顺序不会被布局打乱。通过将边栏设置为一个特定的宽度，并将其定位在主内容右边，就有了一个可以随页面大小扩展和收缩的主内容区，而边栏会一致保持固定的的大小固定在浏览器窗口右侧。</p>
<p>如果希望页面的某一部分大小固定，而另一部分可以扩展和收缩，这就是一个很好的布局选择；或者如果需要精确地指定某个元素的位置，也很适合选择绝对定位。</p>
<p>不过这种布局在此处存在一个缺点：浏览器变宽时，边栏会再次覆盖页脚。</p>
<h3 id="表格显示布局的特点"><a href="#表格显示布局的特点" class="headerlink" title="表格显示布局的特点"></a>表格显示布局的特点</h3><p>通过在HTML结构使用<code>&lt;div&gt;</code>，形成表格显示布局，可以得到完美对齐的两列，而且可以随浏览器窗口的大小扩展和收缩。<br>如果需要建立多栏布局，而且内容栏是均匀的，表格显示就是一个很好的布局策略。</p>
<h1 id="HTML5标记"><a href="#HTML5标记" class="headerlink" title="HTML5标记"></a>HTML5标记</h1><p>HTML5为HTML增加了很多新元素，但较早的浏览器不支持新的HTML5元素，所以一定要知道主要用户使用哪些浏览器访问你的Web页面，除非能确保新元素对你的用户适用，否则不要贸然使用这些新元素。</p>
<h2 id="div元素和HTML5新元素"><a href="#div元素和HTML5新元素" class="headerlink" title="div元素和HTML5新元素"></a>div元素和HTML5新元素</h2><p><code>&lt;section&gt;</code>用于对相关的内容分组。</p>
<p><code>&lt;article&gt;</code>用于类似博客帖子、论坛帖子和新闻报道等独立的内容。</p>
<p><code>&lt;aside&gt;</code>用于表示不作为页面主内容的次要内容，如插图和边栏。</p>
<p><code>&lt;nav&gt;</code>用于组织网站导航链接。</p>
<p><code>&lt;header&gt;</code>将标题、logo和署名等通常放在页面或区块最上方的内容组织在一起。</p>
<p><code>&lt;footer&gt;</code>将诸如文档信息、法律措辞和版权说明等通常在页面或区块最下方的内容组织在一起。</p>
<p><code>&lt;time&gt;</code>用来标记时间和日期。</p>
<p><code>&lt;div&gt;</code>仍然用于建立结构。它通常将元素组织在一起来指定样式，或者有些内容可能不适合放在HTML5中那些与结构相关的新元素中，这些内容就可以使用<code>&lt;div&gt;</code>创建结构。</p>
<h2 id="video元素"><a href="#video元素" class="headerlink" title="video元素"></a>video元素</h2><p><code>&lt;video&gt;</code>用于为页面增加视频。</p>
<p>视频编码是用来创建视频文件的编码。常用的编码包括h.264、Vp8和Theora。</p>
<p>视频同期文件包含视频、音频和元数据。流行的容器格式包括MP4、OGG和WebM。</p>
<p>要提供多个视频源文件，确保你的用户可以在他们的浏览器中观看你的视频文件。</p>
<h1 id="表格与更多列表"><a href="#表格与更多列表" class="headerlink" title="表格与更多列表"></a>表格与更多列表</h1><h2 id="表格的基本使用"><a href="#表格的基本使用" class="headerlink" title="表格的基本使用"></a>表格的基本使用</h2><p>HTML表格使用元素<code>&lt;table&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;th&gt;</code>、<code>&lt;td&gt;</code>建立表格数据结构。其中<code>&lt;table&gt;</code>元素定义并包围整个表格，<code>&lt;tr&gt;</code>元素按行定义，<code>&lt;td&gt;</code>元素定义每行包含的一个或多个数据单元格，<code>&lt;th&gt;</code>元素表示作为行或列表格的数据单元格。</p>
<p>可以用<code>&lt;caption&gt;</code>元素提供关于表格的额外信息（表格标题）。</p>
<h2 id="表格边框和边距"><a href="#表格边框和边距" class="headerlink" title="表格边框和边距"></a>表格边框和边距</h2><p>表格数据单元格有内边距和边框,也有边框间距（border-spacing，相当于外边距，也就是单元格之间的间距）。</p>
<p><code>border-collapse</code>是针对表格的一个特殊的CSS属性，允许将单元格边框合并为一个边框，让外观更简洁。</p>
<h2 id="表格的CSS表现"><a href="#表格的CSS表现" class="headerlink" title="表格的CSS表现"></a>表格的CSS表现</h2><p>可以用<code>text-align</code>和<code>vertical-align</code> CSS属性改变表格单元格中数据的对齐方式。</p>
<p>可以用<code>background-color</code>属性为表格增加颜色。可以为整个表格、各行或者单个的数据单元格增加背景颜色。</p>
<p>使用CSS <code>nth-child</code>伪类可以为表格隔行增加背景颜色。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child(even)</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#fcba7a</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child(odd)</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="表格的进阶使用"><a href="#表格的进阶使用" class="headerlink" title="表格的进阶使用"></a>表格的进阶使用</h2><p>如果一个数据单元格没有数据，<code>&lt;td&gt;</code>元素中不放置任何内容。不过，需要使用一个<code>&lt;td&gt;......&lt;/td&gt;</code>元素维持表格的对齐。</p>
<p>如果数据单元格需要跨多行或多列，可以使用<code>&lt;td&gt;</code>元素的<code>rowspan</code>或<code>colspan</code>属性。</p>
<p>可以在表格中嵌套表格，将<code>&lt;table&gt;</code>元素及其所有内容放在一个数据单元格中。</p>
<h2 id="列表的更多使用"><a href="#列表的更多使用" class="headerlink" title="列表的更多使用"></a>列表的更多使用</h2><p><code>list-style-type</code>用于指定列表中使用的项目符号。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">li</span> &#123;</div><div class="line">    <span class="attribute">list-style-type</span>: dics;  <span class="comment">/* 默认的列表标记类型，为实心圆形标记 */</span></div><div class="line">    <span class="attribute">list-style-type</span>: circle; <span class="comment">/* 空心圆形标记 */</span></div><div class="line">    <span class="attribute">list-style-type</span>: square; <span class="comment">/* 方块标记 */</span></div><div class="line">    <span class="attribute">list-style-type</span>: none;   <span class="comment">/* 无列表标记 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>list-style-image</code>允许指定列表标记图像。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">li</span> &#123;</div><div class="line">    <span class="attribute">list-style-image</span>: <span class="built_in">url</span>(images/backpack.gif);</div><div class="line">    <span class="attribute">padding-top</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="HTML表单"><a href="#HTML表单" class="headerlink" title="HTML表单"></a>HTML表单</h1><h2 id="form-元素"><a href="#form-元素" class="headerlink" title="form 元素"></a>form 元素</h2><p><code>&lt;form&gt;</code>元素定义了表单，所有表单输入元素都嵌套在这个元素中。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://wickedlysmart.com/hfhtmlcss/contest.php"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>method</code>属性包含发送表单数据的方法，可以是POST或GET。POST打包表单数据，并把它作为请求的一部分发送到服务器。GET打包表单数据，并把数据追加到URL。<br>如果表单数据应当是私有的，或者表单数据很多，如使用了一个<code>&lt;textarea&gt;</code>或者file <code>&lt;input&gt;</code>元素，就应当使用POST。<br>对于可以加书签的请求，要使用GET，如查看当前时事的表单。</p>
<h2 id="input-元素"><a href="#input-元素" class="headerlink" title="input 元素"></a>input 元素</h2><p><code>&lt;input&gt;</code>元素是一个void元素，在Web页面上可以作为多种不同的输入控件，这取决于它的<code>type</code>属性值。</p>
<h3 id="文本输入"><a href="#文本输入" class="headerlink" title="文本输入"></a>文本输入</h3><p>text <code>&lt;input&gt;</code>元素用于输入一行文本。它还有一些可选的属性，允许为这个控件设置最大字符个数和宽度。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fullname"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="提交输入"><a href="#提交输入" class="headerlink" title="提交输入"></a>提交输入</h3><p>submit <code>&lt;input&gt;</code>元素会创建一个按钮，允许提交表单。点击这个按钮时，浏览器会把表单发送到服务器脚本进行处理。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="单选钮输入"><a href="#单选钮输入" class="headerlink" title="单选钮输入"></a>单选钮输入</h3><p>radio <code>&lt;input&gt;</code>元素会创建包含多个按钮的控件，所有同名的单选钮构成一组互斥的按钮。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"hotornot"</span> <span class="attr">value</span>=<span class="string">"hot"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"hotornot"</span> <span class="attr">value</span>=<span class="string">"not"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="复选框输入"><a href="#复选框输入" class="headerlink" title="复选框输入"></a>复选框输入</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://feliving.github.io/&quot;&gt;《Head First HTML 与CSS（第2版）》&lt;/a&gt;是比较基础的入门书，快速过一遍，了解HTML和CSS最基本的概念和知识。&lt;br&gt;&lt;img src=&quot;https://img3.doubanio.com/lpic/s27104165.jpg&quot; alt=&quot;book cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="法" scheme="http://yoursite.com/categories/%E6%B3%95/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客搭建记录</title>
    <link href="http://yoursite.com/2016/12/17/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2016/12/17/hexo博客搭建记录/</id>
    <published>2016-12-17T10:58:02.000Z</published>
    <updated>2017-01-19T08:07:27.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h3><ul>
<li>注册 <a href="github.com">GitHub</a></li>
<li>建立名为 <code>username.github.io</code> 的仓库,其中<code>username</code>为自己GitHub的账户名</li>
</ul>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ul>
<li>下载安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></li>
</ul>
<h3 id="Git工具"><a href="#Git工具" class="headerlink" title="Git工具"></a>Git工具</h3><ul>
<li><p>下载安装 <a href="https://git-for-windows.github.io/" target="_blank" rel="external">git</a>，在安装完成后，需输入姓名和电子邮箱记录身份以便后期识别：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"Your Name"</span></div><div class="line">$ git config --global user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure>
</li>
<li><p>另一选项：下载安装<a href="https://desktop.github.com/" target="_blank" rel="external">GitHub Desktop</a>并登录</p>
</li>
<li>配置本电脑的 SSH key 至 <a href="https://github.com/settings/keys" target="_blank" rel="external">GitHub的keys</a></li>
</ul>
<h2 id="使用Hexo创建框架"><a href="#使用Hexo创建框架" class="headerlink" title="使用Hexo创建框架"></a>使用Hexo创建框架</h2><h3 id="安装Hexo命令行工具"><a href="#安装Hexo命令行工具" class="headerlink" title="安装Hexo命令行工具"></a>安装Hexo命令行工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init hexo <span class="comment">#在当前目录下创建一个名为hexo的工作目录并初始化</span></div><div class="line">或者</div><div class="line">$ hexo init <span class="comment">#以当前目录为工作目录并初始化</span></div></pre></td></tr></table></figure>
<h3 id="本地部署并预览"><a href="#本地部署并预览" class="headerlink" title="本地部署并预览"></a>本地部署并预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo generate <span class="comment">#在工作目录下渲染生成博客网站所需要的所有文件</span></div><div class="line">$ hexo server <span class="comment">#在本地启动服务以供预览</span></div><div class="line">或者</div><div class="line">$ hexo s -g</div></pre></td></tr></table></figure>
<p>浏览器打开 <a href="localhost:4000/" target="_blank" rel="external">localhost:4000/</a>即可进行预览。</p>
<h3 id="部署至-GitHub"><a href="#部署至-GitHub" class="headerlink" title="部署至 GitHub"></a>部署至 GitHub</h3><ul>
<li>修改配置文件<br>在工作目录下找到 <em>_config.yml</em> 文件，定位到其中的 depoly 标签，填入相关信息如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: http://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">    type: git</div><div class="line">    repository: https://github.com/firber/firber.github.io.git</div><div class="line">    branch: master</div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中 repository 填入之前新建仓库的地址，保存退出。</p>
<ul>
<li><p>安装几个插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save <span class="comment">#方便使用`hexo deploy`命令发布博客</span></div><div class="line">$ npm install hexo-generator-feed --save <span class="comment">#使网站支持RSS订阅</span></div><div class="line">$ npm install hexo-generator-sitemap --save <span class="comment">#生成sitemap供搜索引擎抓取</span></div></pre></td></tr></table></figure>
</li>
<li><p>部署到 GitHub pages</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d -g</div></pre></td></tr></table></figure>
</li>
</ul>
<p>到 username.github.io查看。</p>
<h4 id="换行编码问题"><a href="#换行编码问题" class="headerlink" title="换行编码问题"></a>换行编码问题</h4><p>若在部署时出现以下类似提示信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">The file will have its original line endings <span class="keyword">in</span> your working directory.</div><div class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> js/src/motion.js.</div><div class="line">The file will have its original line endings <span class="keyword">in</span> your working directory.</div><div class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> js/src/post-details.js.</div></pre></td></tr></table></figure></p>
<p>可使用以下命令关闭换行编码转换：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global core.autocrlf <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<p>具体情况参见<a href="https://git-scm.com/book/zh/v1/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git#格式化与空白" target="_blank" rel="external">Git的文档说明</a>：</p>
<blockquote>
<p>假如你正在Windows上写程序，又或者你正在和其他人合作，他们在Windows上编程，而你却在其他系统上，在这些情况下，你可能会遇到行尾结束符问题。这是因为Windows使用回车和换行两个字符来结束一行，而Mac和Linux只使用换行一个字符。虽然这是小问题，但它会极大地扰乱跨平台协作。</p>
<p>Git可以在你提交时自动地把行结束符CRLF转换成LF，而在签出代码时把LF转换成CRLF。用core.autocrlf来打开此项功能，如果是在Windows系统上，把它设置成true，这样当签出代码时，LF会被转换成CRLF：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global core.autocrlf <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>Linux或Mac系统使用LF作为行结束符，因此你不想 Git 在签出文件时进行自动的转换；当一个以CRLF为行结束符的文件不小心被引入时你肯定想进行修正，把core.autocrlf设置成input来告诉 Git 在提交时把CRLF转换成LF，签出时不转换：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global core.autocrlf input</div></pre></td></tr></table></figure></p>
<p>这样会在Windows系统上的签出文件中保留CRLF，会在Mac和Linux系统上，包括仓库中保留LF。</p>
<p>如果你是Windows程序员，且正在开发仅运行在Windows上的项目，可以设置false取消此功能，把回车符记录在库中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global core.autocrlf <span class="literal">false</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h2><h3 id="发表流程"><a href="#发表流程" class="headerlink" title="发表流程"></a>发表流程</h3><p>使用命令行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo n newpost</div></pre></td></tr></table></figure></p>
<p>执行命令后，会在<code>\source\_posts</code>下生成一个新的<code>newpost.md</code>文件（文章发表后<code>newpost</code>会作为文章名显示在URL上），用Markdown编辑器打开编写即可。<br>写完后，推送至服务器上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d -g</div></pre></td></tr></table></figure></p>
<h3 id="文章格式"><a href="#文章格式" class="headerlink" title="文章格式"></a>文章格式</h3><p>Hexo默认使用Markdown语法写文章，对于如何用Markdown语法写文章，推荐以下教程资料：</p>
<ul>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown 语法说明 (简体中文版)</a></li>
<li><a href="http://xianbai.me/learn-md/index.html" target="_blank" rel="external">Learning-Markdown (Markdown 入门参考)</a></li>
<li><a href="http://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="external">Markdown——入门指南</a><br>除了按照Markdown的语法写文章外，文章开头（Hexo中称为 Front-matter）推荐按照以下格式提供一些必要信息(以本篇文章为例）：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> hexo博客搭建记录   <span class="comment">#文章页面的标题，与文章md文件名不同，不会出现在URL上</span></div><div class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-12</span><span class="bullet">-17</span> <span class="number">18</span>:<span class="number">58</span>:<span class="number">02</span> <span class="comment">#文章生成时间，若不填写此项，默认以发布时间为准</span></div><div class="line"><span class="attr">categories:</span> 器 <span class="comment">#文章分类</span></div><div class="line"><span class="attr">tags:</span>   <span class="comment">#文章标签</span></div><div class="line"><span class="bullet">    -</span> hexo</div><div class="line"><span class="bullet">    -</span> github</div><div class="line"><span class="meta">---</span></div><div class="line">记录在Github上使用Hexo搭建本博客的经历，本地系统为Windows。<span class="comment">#文章摘要</span></div><div class="line">&lt;!-- more --<span class="string">&gt;</span></div><div class="line">正文开始</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="文章编写"><a href="#文章编写" class="headerlink" title="文章编写"></a>文章编写</h3><h4 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h4><p>Markdown编辑器有很多，个人使用 <a href="https://www.sublimetext.com/3" target="_blank" rel="external">Sublime Text 3</a>配合<a href="https://github.com/SublimeText-Markdown/MarkdownEditing" target="_blank" rel="external"><code>MarkdownEditing</code></a>(<a href="http://www.jeffjade.com/2015/08/28/2015-08-28-Write-Morkdown/" target="_blank" rel="external">SublimeText下写作利器之MarkdownEditing</a>)和<a href="https://github.com/timonwong/OmniMarkupPreviewer" target="_blank" rel="external"><code>OmniMarkupPreviewer</code></a>（<a href="http://macplay.leanote.com/post/%E8%BF%91%E4%B9%8E%E5%AE%8C%E7%BE%8E%E7%9A%84-Markdown-%E5%86%99%E4%BD%9C%E4%BD%93%E9%AA%8C-Sublime-Text-3-OmniMarkupPreviewer" target="_blank" rel="external">近乎完美的 Markdown 写作体验 - Sublime Text 3 + OmniMarkupPreviewer</a>）两款插件来编辑Markdown文本。安装方法参见<a href="http://www.jianshu.com/p/335b7d1be39e" target="_blank" rel="external">介绍Sublime3下两款Markdown插件</a>。<br>安装完成后，可以有许多增强功能，常见的有：</p>
<ul>
<li>语法高亮</li>
<li><code>Ctrl</code>+<code>Win</code>+<code>V</code> 快捷键插入链接</li>
<li><code>Shift</code>+<code>Win</code>+<code>K</code> 快捷键插入图片</li>
<li><code>Ctrl</code>+<code>1-6</code> 快捷键设置1至6级标题</li>
<li><code>Ctrl</code>+<code>Alt</code>+<code>O</code> 快捷键在浏览器中预览</li>
<li><code>Ctrl</code>+<code>Alt</code>+<code>X</code> 快捷键导出HTML</li>
</ul>
<p>更详细的使用说明可参见插件的官方文档。</p>
<h4 id="文章格式化"><a href="#文章格式化" class="headerlink" title="文章格式化"></a>文章格式化</h4><p>前文提到在文章正文开始前需提供一些标题之类的必要信息，在 Sublime Text 中可以通过自定义插件格式化输入内容。详细的步骤如下：</p>
<ol>
<li>菜单栏：Tools -&gt; Developer -&gt; New Plugin</li>
<li><p>在打开的插件模板文件中，使用下面的内容覆盖</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> sublime,sublime_plugin</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddPostHeaderCommand</span><span class="params">(sublime_plugin.TextCommand)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, edit)</span>:</span></div><div class="line">        self.view.run_command(<span class="string">"insert_snippet"</span>,</div><div class="line">            &#123;</div><div class="line">                  <span class="string">"contents"</span>: <span class="string">"title: "</span><span class="string">"\n"</span></div><div class="line">                <span class="string">"date: %s"</span> %datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>) +<span class="string">"\n"</span></div><div class="line">                <span class="string">"categories:  "</span><span class="string">"\n"</span></div><div class="line">                <span class="string">"tags: "</span><span class="string">"\n"</span></div><div class="line">                <span class="string">"   - tag1"</span><span class="string">"\n"</span></div><div class="line">                <span class="string">"&lt;!-- comments: false --&gt;\n"</span></div><div class="line">                <span class="string">"---\n"</span></div><div class="line">                <span class="string">"正文摘要\n"</span></div><div class="line">                <span class="string">"&lt;!-- more --&gt;\n"</span></div><div class="line">                <span class="string">"正文开始"</span></div><div class="line">            &#125;</div><div class="line">        )</div></pre></td></tr></table></figure>
</li>
<li><p><code>Ctrl</code>+<code>S</code>保存文件，文件名随便定义，确认保存位置为 <code>Data\Packages\User\</code></p>
</li>
<li><p>绑定快捷键：菜单栏 Preferences -&gt; Key Bindings -&gt; User，使用以下内容覆盖</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;<span class="attr">"keys"</span>: [<span class="string">"ctrl+shift+f5"</span>], <span class="attr">"command"</span>: <span class="string">"add_post_header"</span> &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
<li><p>保存设置，在新建的文章开头使用快捷键<code>Ctril</code>+<code>Shift</code>+<code>F5</code>，即可快速插入。</p>
</li>
</ol>
<h2 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h2><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">hexo主题</a>有很多，可自行查找。此处以 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">next</a>为例。</p>
<ul>
<li>安装主题<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd hexo</div><div class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next # 将next主题文件夹拷贝到工作目录的themes子目录中。</div></pre></td></tr></table></figure>
</li>
</ul>
<p>打开配置文件，定位到 theme 字段，将其值更改为 next，重新部署至Github。</p>
<ul>
<li>主题配置<br>具体见 <a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">next的官方文档</a>。<h3 id="添加文章更新时间"><a href="#添加文章更新时间" class="headerlink" title="添加文章更新时间"></a>添加文章更新时间</h3>打开<code>themes/next/_config.yml</code>，定位<code>Post Settings</code>，修改相应内容如下：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">post_meta:</span></div><div class="line"><span class="attr">  updated_at:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="域名设置"><a href="#域名设置" class="headerlink" title="域名设置"></a>域名设置</h2><p><a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/" target="_blank" rel="external">Using a custom domain with GitHub Pages
</a></p>
<h3 id="域名申请"><a href="#域名申请" class="headerlink" title="域名申请"></a>域名申请</h3><p>域名提供商有很多，如 国外的<a href="https://sg.godaddy.com/zh/" target="_blank" rel="external">godaddy</a>、<a href="https://sg.godaddy.com/zh/" target="_blank" rel="external">name</a>、<a href="https://www.namecheap.com/" target="_blank" rel="external">namecheap</a>，国内的<a href="https://wanwang.aliyun.com/" target="_blank" rel="external">万网</a>，具体的域名比价可以参考 <a href="https://www.domcomp.com/" target="_blank" rel="external">Domain Name Price and Availability</a> 这个网站。除了价格原因，如何选择一个靠谱的域名提供商，网上有很多对比文章，比如月光博客的 <a href="http://www.williamlong.info/archives/3852.html" target="_blank" rel="external">《国内国外注册域名的对比》</a>。长远而言，在国外注册域名似乎更“灵活”，但我查了下godaddy，个人隐私保护还需要额外付费，总体价格也不是很有优势，于是选择了万网。</p>
<p>万网的<code>.com</code> 域名新注册域名55元/年，续费60元/年，加上新用户送的16元优惠券，最少39元首年拿下（关注“阿里云域名”微信公众号还可以获得最新优惠口令，减免10元，但不与优惠券重叠）。</p>
<p>2016年7月18日起，在万网上注册 <code>.com</code>/<code>.net</code> 域名也必须进行域名实名认证，详见 <a href="https://help.aliyun.com/knowledge_detail/35882.html?spm=5176.200001.n2.21.vgiYpG" target="_blank" rel="external">万网帮助文档</a>。</p>
<h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><p>参见<a href="https://help.github.com/articles/adding-or-removing-a-custom-domain-for-your-github-pages-site/" target="_blank" rel="external">GitHub Pages的帮助文档</a>，具体步骤如下：</p>
<ol>
<li>在Hexo目录下<code>/source</code>文件夹中创建包含URL的 <code>CNAME</code> 文件，此处为 <code>blog.firber.com</code>（<strong>注：</strong>不要在GitHub端创建包含URL的 <code>CNAME</code> 文件，虽然完成设置后能正常使用，但在下一次本地提交部署后会更新文件，导致<code>CNAME</code> 文件被删除，最后出现404错误）。</li>
<li>到万网的域名控制台中，定位到“解析设置”，添加解析 <code>CNAME</code>，主机名为<code>blog</code>，记录值为原有的 GitHub Pages 地址加上点号，此处为<code>firber.github.io.</code>。</li>
<li>等待几分钟后，访问<code>blog.firber.com</code>就能看到与<code>firber.github.io.</code>相同的页面，证明绑定成功了。</li>
</ol>
<h2 id="其他参考资料"><a href="#其他参考资料" class="headerlink" title="其他参考资料"></a><em>其他参考资料</em></h2><ol>
<li><a href="https://zhuanlan.zhihu.com/p/22191919?refer=crossin" target="_blank" rel="external">用 GitHub + Hexo 建立你的第一个博客</a></li>
<li><a href="http://blog.zfan.me/2015/08/31/3%E5%88%86%E9%92%9F%E5%BF%AB%E9%80%9F%E5%9C%A8Github-pages%E4%B8%8A%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">3分钟快速在Github pages上免费搭建Hexo博客</a></li>
<li><a href="http://www.jianshu.com/p/05289a4bc8b2#" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a>(内容详实，推荐)</li>
<li><a href="http://www.jianshu.com/p/13e64c9e2295" target="_blank" rel="external">Mac上搭建基于GitHub的Hexo博客</a></li>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo官方文档</a></li>
<li><a href="http://www.jianshu.com/p/fa2354d61e37" target="_blank" rel="external">hexo+next添加algolia搜索</a>(此处官方文档有误，需在 themes\next\layout_partials\header.swig 中增加相应语句)</li>
<li><a href="http://www.yuthon.com/2016/04/11/Tips-for-Hexo-configuration/" target="_blank" rel="external">Tips for Hexo configuration</a></li>
<li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages 官方页面</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      记录在Github上使用Hexo搭建本博客的经历，本地系统为Windows。
    
    </summary>
    
      <category term="器" scheme="http://yoursite.com/categories/%E5%99%A8/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
</feed>
